;; -*-scheme-*-
;;
;; serveez.cfg - example configuration file
;;
;; Copyright (C) 2001 Stefan Jahn <stefan@lkcc.org>
;; Copyright (C) 2001 Raimund Jacob <raimi@lkcc.org>
;;
;; This is free software; you can redistribute it and/or modify it
;; under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.
;; 
;; This software is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;; 
;; You should have received a copy of the GNU General Public License
;; along with this package; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.
;;
;; $Id: serveez.cfg,v 1.26 2001/06/05 17:57:22 ela Exp $
;;

;;
;; === Convenience functions - Scheme for beginners, thanks to 'mgrabmue.
;;

(define (println . args) (for-each display args) (newline))
(define (printsln spacer . args)
  (for-each (lambda (x) (display x) (display spacer)) args) (newline))

;; === Greet the user
(printsln " "
	  "** Welcome to Serveez" serveez-version 
	  "using Guile" guile-version
	  (if have-debug
	      "(debugging enabled)"
	      ""
	   ))

(if have-Win32
    (println "* This is the Win32 port, good luck."))

;; Example foo server.
(define-port! 'foo-port '(
			  (proto . tcp)
			  (port . 42421)
			  ))

(define-server! 'foo-server '(
			      (bar . 100)
			      (reply . "Booo")
			      (messages . ("Welcome to the foo test server."
					   "This one echos your lines."))
			      (ports . (5 6 7 8 9))
			      (port . foo-port)
			      (assoc (( "GNU" . "great") 
				      ( "Tree" . "tall" )))
			      ))

;; Chat server.
(define-port! 'textSure-port `(
			       (proto . tcp)
			       (port . ,(+ 42418 2))
			       ))

(define-port! 'textSure-port-pipe `(
				    (proto . pipe)
				    (recv ((name . ".aWCSrecv")
					   (permissions . #o0666)
					   (user . "stefan")
					   (uid . 50)
					   (group . "users")
					   (gid . 100)))
				    (send  ((name . ".aWCSsend")
					    (permissions . #o0666)
					    (user . "stefan")
					    (uid . 50)
					    (group . "users")
					    (gid . 100)))
				    ))

(define-server! 'aWCS-server '(
			       ))

;; Control protocol server for remote control.
(define-port! 'control-port `(
			      (proto . tcp)
			      (port . 42420)
			      ))

(define-server! 'control-server '(
				  ))

;; Definition of a fake ident server.
(define-port! 'ident-port `(
			    (proto . tcp)
			    (port . 113)
			    ))

(define-server! 'fakeident-server '(
				    (systemtype . UNIX)
				    (username . SupaRaimi)
				    ))

;; Definition of a non-existing server.
(define-port! 'q3key-port `(
			    (proto . udp)
			    (port . 27952)
			    ))

;;(define-server! 'q3key-server '(
;;				))

;; Do final bindings here.
;;(bind-server! 'q3key-port 'q3key-server)
(bind-server! 'textSure-port 'aWCS-server)
(bind-server! 'textSure-port-pipe 'aWCS-server)
(bind-server! 'control-port 'control-server)
(bind-server! 'ident-port 'fakeident-server)
(bind-server! 'foo-port 'foo-server)

;;
;; === general options for serveez
;;

;; log level 0..4 (lesser values mean fewer logging messages)
;; use 0 for production environment
(set! serveez-verbosity 4)

;; maximum accepted remote connections
(set! serveez-sockets 100)

;; password for the control protocol (plain/crypted)
(set! serveez-pass "secret")
;;(set! serveez-pass "xmA9CY34MxkGg")

;;
;; If you want to include more settings from other files use this.
;;
;;(primitive-load "otherfile.cfg")
