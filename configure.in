dnl -*-shell-script-*-
dnl configure.in
dnl
dnl Autoconf input file.
dnl
dnl Copyright (C) 2000 Stefan Jahn <stefan@lkcc.org>
dnl Copyright (C) 2000 Raimund Jacob <raimi@lkcc.org>
dnl Copyright (C) 1999 Martin Grabmueller <mgrabmue@cs.tu-berlin.de>
dnl
dnl This is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2, or (at your option)
dnl any later version.
dnl 
dnl This software is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl 
dnl You should have received a copy of the GNU General Public License
dnl along with this package; see the file COPYING.  If not, write to
dnl the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
dnl Boston, MA 02111-1307, USA.  
dnl

dnl ----------------------------------------------------------------------

dnl
dnl Initialize autoconf and automake
dnl
AC_INIT(src/serveez.c)
AM_INIT_AUTOMAKE(serveez,0.0.18,no-define)
AM_CONFIG_HEADER(config.h)

dnl
dnl Determine if maintainer portions of the Makefiles should be included.
dnl
AM_MAINTAINER_MODE

dnl ----------------------------------------------------------------------

dnl
dnl Determine default prefix
dnl
test x$prefix = "xNONE" && prefix="$ac_default_prefix"

dnl ----------------------------------------------------------------------

dnl
dnl Check for a proper C compiler.
dnl
AC_PROG_CC
AC_C_CONST
AC_C_BIGENDIAN
AC_CHECK_SIZEOF(unsigned, 8)
AC_CHECK_SIZEOF(void *, 8)

dnl
dnl Locate required external software.
dnl
AC_PROG_INSTALL

dnl
dnl Check for the ar library archiver.
dnl
AC_PROG_RANLIB
AC_CHECK_PROG(AR, ar, ar)
AC_SUBST(AR)

dnl ----------------------------------------------------------------------

EXTRALIBS=""
CPPEXTRAFLAGS=""

AC_SUBST(CPPEXTRAFLAGS)
AC_SUBST(CPPFLAGS)

dnl ----------------------------------------------------------------------

dnl
dnl Check whether compilation warnings are desired.
dnl

define_enable_warn="no"
AC_ARG_ENABLE(warn,
[  --enable-warn           Turn on most compiler warnings [default=no]],
[if test "yes" = "$enableval"; then
   define_enable_warn="yes"
 fi])

if test $define_enable_warn = yes ; then
    save_cflags="$CFLAGS"
    warn_cflags=""
    CFLAGS="-W"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,warn_cflags="$warn_cflags $CFLAGS"
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))
    CFLAGS="-fullwarn"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,warn_cflags="$warn_cflags $CFLAGS" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))
    CFLAGS="-pedantic"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,warn_cflags="$warn_cflags $CFLAGS" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))

dnl
dnl Only make these tests if we are using GNU C
dnl
if test x$GCC = xyes ; then
    CFLAGS="-Wall"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,warn_cflags="$warn_cflags $CFLAGS" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))
    CFLAGS="-Wno-unused"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,warn_cflags="$warn_cflags $CFLAGS" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))
    CFLAGS="-Wcast-align"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,warn_cflags="$warn_cflags $CFLAGS" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))
    CFLAGS="-Wstrict-prototypes"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,warn_cflags="$warn_cflags $CFLAGS" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))
    CFLAGS="-Wformat"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,warn_cflags="$warn_cflags $CFLAGS" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))
    CFLAGS="-Wno-long-long"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,warn_cflags="$warn_cflags $CFLAGS" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))

dnl
dnl Test this compiler flag under Linux only.
dnl
if test "`uname -s`" = "Linux"; then
    CFLAGS="-ansi"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,warn_cflags="$warn_cflags $CFLAGS" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))
fi
fi

    CFLAGS="$save_cflags"
    CPPEXTRAFLAGS="$warn_cflags"
    unset warn_cflags
    unset save_cflags
fi

unset define_enable_warn

dnl ----------------------------------------------------------------------

dnl
dnl Check whether compilation optimizations are desired.
dnl

AC_MSG_CHECKING([whether to enable optimizations])
AC_ARG_ENABLE(opt,          
    [  --enable-opt            Turn on compiler optimizations [default=no]],
    if test x$enableval = "xyes"; then
	define_enable_opt=yes
	AC_MSG_RESULT([yes])
    else
	define_enable_opt=no
	AC_MSG_RESULT([no])
    fi,
    define_enable_opt=no
    AC_MSG_RESULT([no])
)

if test $define_enable_opt = yes ; then
    save_cflags="$CFLAGS"
    opt_cflags=""
    opt_ldflags=""
    CFLAGS="-O2"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,opt_cflags="$opt_cflags $CFLAGS" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))

dnl
dnl Only make these tests if we are using GNU C
dnl
if test x$GCC = xyes ; then
    CFLAGS="-fomit-frame-pointer" 
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,opt_cflags="$opt_cflags $CFLAGS" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))
    CFLAGS="-fstrength-reduce"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,opt_cflags="$opt_cflags $CFLAGS" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))
    CFLAGS="-m486"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,
	opt_is486="yes" 
	AC_MSG_RESULT([yes]), 
	opt_is486="no" 
	AC_MSG_RESULT([no]))
    CFLAGS="-march=pentiumpro"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,
	opt_isPPro="yes" 
	AC_MSG_RESULT([yes]), 
	opt_isPPro="no"	
	AC_MSG_RESULT([no]))
    CFLAGS="-funroll-loops"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,opt_cflags="$opt_cflags $CFLAGS" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))
    CFLAGS="-finline-functions"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,opt_cflags="$opt_cflags $CFLAGS" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))
    CFLAGS="-fgcse"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,opt_cflags="$opt_cflags $CFLAGS" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))
    CFLAGS="-fexpensive-optimizations"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,opt_cflags="$opt_cflags $CFLAGS" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))
    CFLAGS="-fcaller-saves"
    AC_MSG_CHECKING([whether $CC accepts $CFLAGS])
    AC_TRY_COMPILE(,,opt_cflags="$opt_cflags $CFLAGS" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))
fi

    LDFLAGS="-s"
    AC_MSG_CHECKING([whether $CC accepts $LDFLAGS])
    AC_TRY_LINK(,,opt_ldflags="$opt_ldflags -s" 
	AC_MSG_RESULT([yes]), 
	AC_MSG_RESULT([no]))

if test x$opt_isPPro = "xyes" ; then
    AC_MSG_CHECKING([whether to enable i686 optimizations])
    AC_ARG_ENABLE(
	ppro,
	[  --enable-ppro           Turn on i686 optimizations [default=no]],
	if test x$enableval = "xyes"; then
	    opt_cflags="$opt_cflags -march=pentiumpro"
	    opt_isPPro="done"
	    AC_MSG_RESULT([yes])
	else
	    AC_MSG_RESULT([no])
	fi,
	AC_MSG_RESULT([no]))
fi

if test x$opt_is486 = "xyes" -a ! x$opt_isPPro = "xdone"; then
    AC_MSG_CHECKING([whether to enable i486 optimizations])
    AC_ARG_ENABLE(
	486,
	[  --enable-486            Turn on i486 optimizations [default=yes]],
	if test x$enableval = "xyes"; then
	    opt_cflags="$opt_cflags -m486"
	    AC_MSG_RESULT([yes])
	else
	    AC_MSG_RESULT([no])
	fi,
	opt_cflags="$opt_cflags -m486"
	AC_MSG_RESULT([yes]))
fi

    LDFLAGS="$opt_ldflags"
    CPPEXTRAFLAGS="$CPPEXTRAFLAGS $opt_cflags"
    CFLAGS=""
    unset save_cflags
    unset opt_cflags
    unset opt_ldflags
fi

AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)
unset define_enable_opt

dnl ----------------------------------------------------------------------

dnl
dnl Check whether debug output should be included.
dnl

AC_MSG_CHECKING([whether to enable debug output])
AC_ARG_ENABLE(
  debug,
  [  --enable-debug          Include debug output [default=yes]],
  if test x$enableval = "xyes"; then
    define_enable_debug=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_debug=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_debug=yes
  AC_MSG_RESULT([yes])
)

if test $define_enable_debug = yes ; then
  AC_DEFINE(ENABLE_DEBUG,
    1,
    [Define if debug output should be supported.])
else
  AC_DEFINE(NDEBUG, 1, [Define if debug code should be suppressed.])
fi
unset define_enable_debug

dnl ----------------------------------------------------------------------

dnl
dnl Check whether we try to list local interfaces.
dnl

AC_MSG_CHECKING([whether to enable list of local interfaces])
AC_ARG_ENABLE(
    iflist,
    [  --enable-iflist         List local interfaces [default=yes]],
    if test x$enableval = "xyes"; then
	define_enable_iflist=yes
	AC_MSG_RESULT([yes])
    else
	define_enable_iflist=no
	AC_MSG_RESULT([no])
    fi,
	define_enable_iflist=yes
	AC_MSG_RESULT([yes])
)

if test $define_enable_iflist = yes ; then
    AC_DEFINE(ENABLE_IFLIST,
    1,
    [Define if we are able to list local network interfaces.])
fi
unset define_enable_iflist

dnl ----------------------------------------------------------------------

dnl
dnl Check whether poll loop should be supported.
dnl

AC_MSG_CHECKING([whether to enable poll loop])
AC_ARG_ENABLE(
    poll,
    [  --enable-poll           Include poll() server loop [default=yes]],
    if test x$enableval = "xyes"; then
	define_enable_poll=yes
	AC_MSG_RESULT([yes])
    else
	define_enable_poll=no
	AC_MSG_RESULT([no])
    fi,
	define_enable_poll=yes
	AC_MSG_RESULT([yes])
)

if test $define_enable_poll = yes ; then
    AC_DEFINE(ENABLE_POLL,
    1,
    [Define if poll() should be supported if possible.])
fi
unset define_enable_poll

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the Quake3 license key server should be included.
dnl

AC_MSG_CHECKING([whether to enable Quake3 license key server])
AC_ARG_ENABLE(
    q3key,
    [  --enable-q3key-proto    Include Quake3 license server [default=yes]],
    if test x$enableval = "xyes"; then
	define_enable_q3key=yes
	AC_MSG_RESULT([yes])
    else
	define_enable_q3key=no
	AC_MSG_RESULT([no])
    fi,
	define_enable_q3key=yes
	AC_MSG_RESULT([yes])
)

if test $define_enable_q3key = yes ; then
    AC_DEFINE(ENABLE_Q3KEY_PROTO,
    1,
    [Define if Quake3 license key server should be included.])
fi
unset define_enable_q3key

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the Gnutella server should be included.
dnl

AC_MSG_CHECKING([whether to enable Gnutella spider])
AC_ARG_ENABLE(
    gnutella,
    [  --enable-gnutella       Include Gnutella spider [default=yes]],
    if test x$enableval = "xyes"; then
	define_enable_nut=yes
	AC_MSG_RESULT([yes])
    else
	define_enable_nut=no
	AC_MSG_RESULT([no])
    fi,
	define_enable_nut=yes
	AC_MSG_RESULT([yes])
)

if test $define_enable_nut = yes ; then
    AC_DEFINE(ENABLE_GNUTELLA,
    1,
    [Define if Gnutella spider should be included.])
fi
unset define_enable_nut

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the control protocol should be included.
dnl

AC_MSG_CHECKING([whether to enable support for the control protocol])
AC_ARG_ENABLE(
  control-proto,
  [  --enable-control-proto  Include the control protocol [default=yes]],
  if test x$enableval = "xyes"; then
    define_enable_control_proto=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_control_proto=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_control_proto=yes
  AC_MSG_RESULT([yes])
)

if test $define_enable_control_proto = yes ; then
  AC_DEFINE(ENABLE_CONTROL_PROTO,
    1,
    [Define if the control protocol should be supported.])
fi
unset define_enable_control_proto

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the IRC protocol should be included.
dnl

AC_MSG_CHECKING([whether to enable support for the IRC protocol])
AC_ARG_ENABLE(
  irc-proto,
  [  --enable-irc-proto      Include the IRC protocol [default=yes]],
  if test x$enableval = "xyes"; then
    define_enable_irc_proto=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_irc_proto=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_irc_proto=yes
  AC_MSG_RESULT([yes])
)

if test $define_enable_irc_proto = yes ; then
  AC_DEFINE(ENABLE_IRC_PROTO,
    1,
    [Define if the IRC protocol should be supported.])
fi
unset define_enable_irc_proto

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the IRC protocol "TimeStamp" extension should be included.
dnl

AC_MSG_CHECKING([whether to enable TimeStamp for the IRC protocol])
AC_ARG_ENABLE(
  irc-ts,
  [  --enable-irc-ts         Include TimeStamp in IRC protocol [default=yes]],
  if test x$enableval = "xyes"; then
    define_enable_irc_ts=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_irc_ts=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_irc_ts=yes
  AC_MSG_RESULT([yes])
)

if test $define_enable_irc_ts = yes ; then
  AC_DEFINE(ENABLE_TIMESTAMP,
    1,
    [Define if the IRC protocol TimeStamp extension should be supported.])
fi
unset define_enable_irc_ts

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the password encryption should be included.
dnl

AC_MSG_CHECKING([whether to enable password encryption])
AC_ARG_ENABLE(
  crypt,
  [  --enable-crypt          Include password encryption [default=no]],
  if test x$enableval = "xyes"; then
    define_enable_crypt=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_crypt=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_crypt=no
  AC_MSG_RESULT([no])
)

if test $define_enable_crypt = yes; then
  AC_DEFINE(ENABLE_CRYPT,
    1,
    [Define if the password encryption should be supported.])
fi

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the aWCS protocol should be included.
dnl
AC_MSG_CHECKING([whether to enable support for the aWCS protocol])
AC_ARG_ENABLE(
  awcs-proto, 
  [  --enable-awcs-proto     Include the aWCS protocol [default=yes]],
  if test x$enableval = "xyes"; then
    define_enable_awcs_proto=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_awcs_proto=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_awcs_proto=yes
  AC_MSG_RESULT([yes])
)

if test $define_enable_awcs_proto = yes ; then
  AC_DEFINE(ENABLE_AWCS_PROTO,
    1,
    [Define if the aWCS protocol should be supported.])
fi
unset define_enable_awcs_proto

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the HTTP protocol should be included.
dnl
AC_MSG_CHECKING([whether to enable support for the HTTP protocol])
AC_ARG_ENABLE(
  http-proto, 
  [  --enable-http-proto     Include the HTTP protocol [default=yes]],
  if test x$enableval = "xyes"; then
    define_enable_http_proto=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_http_proto=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_http_proto=yes
  AC_MSG_RESULT([yes])
)

if test $define_enable_http_proto = yes ; then
  AC_DEFINE(ENABLE_HTTP_PROTO,
    1,
    [Define if the HTTP protocol should be supported.])
fi
unset define_enable_http_proto

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the ident support should be included.
dnl
AC_MSG_CHECKING([whether to enable support for ident authentication])
AC_ARG_ENABLE(
  ident,
  [  --enable-ident          Include ident authentication [default=yes]],
  if test x$enableval = "xyes"; then
    define_enable_ident=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_ident=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_ident=yes
  AC_MSG_RESULT([yes])
)

if test $define_enable_ident = yes ; then
  AC_DEFINE(ENABLE_IDENT,
    1,
    [Define if ident authentication should be supported.])
fi
unset define_enable_ident

dnl ----------------------------------------------------------------------

dnl
dnl Check whether reverse DNS lookup should be included.
dnl
AC_MSG_CHECKING([whether to enable reverse DNS lookup])
AC_ARG_ENABLE(
  reverse-dns,
  [  --enable-reverse-dns    Include reverse DNS lookup [default=yes]],
  if test x$enableval = "xyes"; then
    define_enable_reverse_lookup=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_reverse_lookup=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_reverse_lookup=yes
  AC_MSG_RESULT([yes])
)

if test $define_enable_reverse_lookup = yes ; then
  AC_DEFINE(ENABLE_REVERSE_LOOKUP,
    1,
    [Define if reverse DNS lookup should be supported.])
fi
unset define_enable_reverse_lookup

dnl ----------------------------------------------------------------------

dnl
dnl Check whether DNS lookup should be included.
dnl
AC_MSG_CHECKING([whether to enable DNS lookup])
AC_ARG_ENABLE(
  dns,
  [  --enable-dns            Include DNS lookup [default=yes]],
  if test x$enableval = "xyes"; then
    define_enable_dns_lookup=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_dns_lookup=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_dns_lookup=yes
  AC_MSG_RESULT([yes])
)

if test $define_enable_dns_lookup = yes ; then
  AC_DEFINE(ENABLE_DNS_LOOKUP,
    1,
    [Define if DNS lookup should be supported.])
fi
unset define_enable_dns_lookup

dnl ----------------------------------------------------------------------

dnl
dnl Check whether the flood protection should be included.
dnl
AC_MSG_CHECKING([whether to enable support for flood protection])
AC_ARG_ENABLE(
  flood,
  [  --enable-flood          Include flood protection [default=yes]],
  if test x$enableval = "xyes"; then
    define_enable_flood=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_flood=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_flood=yes
  AC_MSG_RESULT([yes])
)

if test $define_enable_flood = yes; then
  AC_DEFINE(ENABLE_FLOOD_PROTECTION,
    1,
    [Define if flood protection should be supported.])
fi
unset define_enable_flood

dnl ----------------------------------------------------------------------

dnl
dnl Check for additional searchpath for MingW32 headers and libraries.
dnl
AC_ARG_WITH(mingw,
    [  --with-mingw=DIR        MingW32 files are in DIR [/usr/local/mingw]],
    [case "$withval" in
     no)  MINGDIR="no" ;;
     yes) MINGDIR="/usr/local/mingw" ;;
     *)   MINGDIR=$withval ;;
    esac],
    MINGDIR="/usr/local/mingw")

dnl
dnl Check if this is Win32 (CYGWIN/MINGW32).
dnl
AC_CYGWIN
AC_EXEEXT
AC_OBJEXT
if test "$CYGWIN" = "yes" -o "$MINGW32" = "yes"; then
    AC_DEFINE(FD_SETSIZE, 4096, [Make CygWin / MinGW32 use large FD sets.])
    AC_DEFINE(WIN32_LEAN_AND_MEAN, 1, [Define for faster code generation.])
    AC_CHECK_LIB(advapi32, main, EXTRALIBS="$EXTRALIBS -ladvapi32")
    if test "$MINGDIR" != "no" -a "$MINGW32" != "yes"; then
	CFLAGS="$CFLAGS -mno-cygwin -I${MINGDIR}/include"
	LDFLAGS="$LDFLAGS -mno-cygwin -L${MINGDIR}/lib"
	AC_MSG_RESULT([using MingW32 headers and libraries in ${MINGDIR}])
	AC_CHECK_LIB(wsock32, main, EXTRALIBS="$EXTRALIBS -lwsock32")
    fi
fi

dnl ----------------------------------------------------------------------

dnl
dnl Find out where to get sizzle
dnl
sizzle_src="no"
sizzle_inst="no"
SIZZLEDEP=""
SIZZLERULE=""
SIZZLESTATIC=""
SIZZLEDIR=""

AC_MSG_CHECKING([for local sizzle installation])
if test -n "`sizzle-config 2>/dev/null`"; then
    AC_MSG_RESULT([yes])
    sizzle_inst="yes"
    sizzle_cflags=`sizzle-config compile`
    sizzle_ldflag=`sizzle-config link`
else
    AC_MSG_RESULT([no])
    sizzle_inst="no"
fi

AC_ARG_WITH(sizzle,
    [  --with-sizzle=DIR       Sizzle source distribution in DIR ],
    sizzle_dir=$withval,
    sizzle_dir="no")

AC_MSG_CHECKING([for libsizzle source distribution])
if test ! -d $sizzle_dir; then
    AC_MSG_RESULT([not found])
    if test "$sizzle_inst" = "no"; then
	AC_MSG_ERROR([cannot compile without libsizzle])
	AC_MSG_ERROR([install one or tell me where the source is])
        exit 1
    else
        sizzle_src="no"
    fi
else
    old_dir="`pwd`"
    cd $sizzle_dir
    SIZZLEDIR="`pwd`"
    cd $old_dir
    unset old_dir
    AC_MSG_RESULT([located in $SIZZLEDIR])
    sizzle_cflags="-I$SIZZLEDIR"
    sizzle_ldflag=""
    SIZZLESTATIC="$SIZZLEDIR/libsizzle/.libs/libsizzle.a -lm"
    SIZZLEDEP="$SIZZLEDIR/libsizzle/.libs/libsizzle.a"
    SIZZLERULE="$SIZZLEDEP"
    sizzle_src="yes"
fi

CFLAGS="$CFLAGS $sizzle_cflags"
LDFLAGS="$LDFLAGS $sizzle_ldflag"
AC_SUBST(SIZZLESTATIC)
AC_SUBST(SIZZLERULE)
AC_SUBST(SIZZLEDEP)
AC_SUBST(SIZZLEDIR)

dnl ----------------------------------------------------------------------

dnl
dnl Check whether to include support for named pipes under Linux.
dnl

AC_CHECK_FUNCS(mkfifo sendfile)
AC_MSG_CHECKING([for host system])
host_sys="`uname -s`"
if test x$host_sys = x; then
    host_sys="`ver`"
fi
AC_MSG_RESULT($host_sys)

dnl ----------------------------------------------------------------------

dnl
dnl Check whether to include support for heap counters.
dnl
AC_MSG_CHECKING([whether to enable heap counters])
AC_ARG_ENABLE(
  heap-count,
  [  --enable-heap-count     Include support for heap counters [default=yes]],
  if test x$enableval = "xyes"; then
    define_enable_heap=yes
    AC_MSG_RESULT([yes])
  else
    define_enable_heap=no
    AC_MSG_RESULT([no])
  fi,
  define_enable_heap=yes
  AC_MSG_RESULT([yes])
)

if test x$define_enable_heap = "xyes"; then
    AC_DEFINE(ENABLE_HEAP_COUNT, 1,
	[Define if heap counters should be enabled.])
fi
unset define_enable_heap

dnl ----------------------------------------------------------------------

dnl
dnl Check for system header files.
dnl
AC_HEADER_STDC

dnl There is no wait.h on AIX, but sys/wait.h.
AC_MSG_CHECKING([for wait.h])
AC_TRY_CPP([#include <wait.h>],
    AC_DEFINE(HAVE_WAIT_H, 1, [Define if you have the <wait.h>.])
    AC_MSG_RESULT(yes),
    AC_MSG_RESULT(no)
)

AC_HEADER_SYS_WAIT

dnl bzero() is defined in strings.h on AIX, used by FD_ZERO()
AC_MSG_CHECKING([for strings.h])
AC_TRY_CPP([#include <strings.h>],
    AC_DEFINE(HAVE_STRINGS_H, 1, [Define if you have the <strings.h>.])
    AC_MSG_RESULT(yes),
    AC_MSG_RESULT(no)
)

AC_CHECK_FUNC(strcasecmp,
    AC_DEFINE(HAVE_STRCASECMP, 1, 
	[Define if you have the strcasecmp function.]),
    AC_CHECK_FUNC(stricmp,
	AC_DEFINE(HAVE_STRICMP, 1, 
	    [Define if you have the stricmp function.])))

AC_CHECK_FUNC(strncasecmp,
    AC_DEFINE(HAVE_STRNCASECMP, 1, 
	[Define if you have the strncasecmp function.]),
    AC_CHECK_FUNC(strnicmp,
	AC_DEFINE(HAVE_STRNICMP, 1, 
	    [Define if you have the strnicmp function.])))

AC_CHECK_FUNCS(strchr memcpy scandir alphasort getrlimit)
AC_CHECK_HEADERS(stdio.h unistd.h sys/time.h sys/poll.h)
AC_CHECK_HEADERS(varargs.h)
AC_CHECK_HEADERS(getopt.h)
AC_CHECK_HEADERS(sys/sockio.h sys/resource.h)
AC_CHECK_HEADERS(sys/sendfile.h netinet/tcp.h)
AC_CHECK_HEADERS(dirent.h sys/dirent.h direct.h)
AC_HEADER_DIRENT

have_getopt="no"
have_getopt_long="no"
AC_CHECK_FUNC(getopt, have_getopt="yes",
    AC_CHECK_LIB(iberty, getopt, have_getopt="yeslib"))
if test $have_getopt != "no"; then
    AC_DEFINE(HAVE_GETOPT, 
	1, [Define if you have the getopt function.])
fi

AC_CHECK_FUNC(getopt_long, have_getopt_long="yes",
    AC_CHECK_LIB(iberty, getopt_long, have_getopt_long="yeslib"))

dnl We might declare getopt_long ourselves if the headers do not.

if test $have_getopt_long != "no"; then
    AC_MSG_CHECKING([whether getopt_long is declared])
    AC_EGREP_HEADER(getopt_long, getopt.h,
	AC_MSG_RESULT([yes])
	AC_DEFINE(DECLARED_GETOPT_LONG, 
	    1, [Define if the getopt_long function is declared in getopt.h.]),
	AC_MSG_RESULT([no]))
fi

if test $have_getopt_long != "no"; then
    AC_DEFINE(HAVE_GETOPT_LONG, 
	1, [Define if you have the getopt_long function.])
fi

if test $have_getopt = "yeslib" || test $have_getopt_long = "yeslib"; then
    EXTRALIBS="$EXTRALIBS -liberty"
fi
unset have_getopt
unset have_getopt_long

dnl ----------------------------------------------------------------------

dnl Check for 'uname' interface.

AC_CHECK_HEADERS(sys/utsname.h)
AC_CHECK_FUNCS(uname)

dnl ----------------------------------------------------------------------

dnl Check for the 'kstat' interface on Solaris.

AC_CHECK_LIB(kstat, kstat_open,
    AC_DEFINE(HAVE_LIBKSTAT, 
	1, [Define if Solaris provides the kstat library.])
    EXTRALIBS="$EXTRALIBS -lkstat")

dnl Check for the 'pstat' interface on HP-Unix.

AC_MSG_CHECKING([for pstat_getdynamic])
AC_EGREP_HEADER(pstat_getdynamic, sys/pstat.h,
    AC_DEFINE(HAVE_PSTAT, 
	1, [Define if HP-Unix provides the pstat interface.])
    AC_MSG_RESULT(yes),
    AC_MSG_RESULT(no))

dnl Check for the 'sysget' interface on IRIX.

AC_MSG_CHECKING([for sysget])
AC_EGREP_HEADER(sysget, sys/sysget.h,
    AC_DEFINE(HAVE_SYSGET, 
	1, [Define if IRIX provides the sysget interface.])
    AC_MSG_RESULT(yes),
    AC_MSG_RESULT(no))

dnl Check for the '/proc/stat' file under Linux.

AC_MSG_CHECKING([whether /proc/stat exists])
enable_procstat=`cat /proc/stat 2>&1 | grep "cpu  "`
if test "x$enable_procstat" != "x"; then
    AC_DEFINE(HAVE_PROC_STAT, 
	1, [Define if Linux supports the /proc/stat file.])
    AC_MSG_RESULT(yes)
else
    AC_MSG_RESULT(no)
fi
unset enable_procstat

dnl ----------------------------------------------------------------------

dnl
dnl Check for existance of some useful functions.
dnl
AC_CHECK_FUNCS(vsprintf)
if test $ac_cv_func_vsprintf = yes;  then
  AC_DEFINE(HAVE_VSPRINTF, 1, [Define if you have the vsprintf function.])
else
  AC_MSG_ERROR([cannot compile without vsprintf])
  exit
fi

dnl
dnl Some Unices (e.g. Dec Unix) do not implement snprintf().
dnl
AC_CHECK_FUNC(snprintf, , AC_CHECK_FUNC(_snprintf))
if test x$ac_cv_func_snprintf = xyes -o x$ac_cv_func__snprintf = xyes; then
  AC_DEFINE(HAVE_SNPRINTF, 1, [Define if you have the snprintf function.])
else
  AC_MSG_WARN([using function vsnprintf instead])
fi

AC_CHECK_FUNC(vsnprintf, , AC_CHECK_FUNC(_vsnprintf))
if test x$ac_cv_func_vsnprintf = xyes -o x$ac_cv_func__vsnprintf = xyes; then
  AC_DEFINE(HAVE_VSNPRINTF, 1, [Define if you have the vsnprintf function.])
else
  AC_MSG_WARN([using unsafe function vsprintf instead])
fi

dnl
dnl Check whether extra net libraries are required.
dnl
AC_CHECK_FUNC(connect)
if test $ac_cv_func_connect = no; then
    AC_CHECK_LIB(socket, connect, EXTRALIBS="$EXTRALIBS -lsocket")
fi

dnl
dnl Check for Solaris nsl and resolv library.
dnl
AC_CHECK_FUNC(gethostbyaddr)
if test $ac_cv_func_gethostbyaddr = no; then
    AC_CHECK_LIB(nsl, gethostbyaddr, EXTRALIBS="$EXTRALIBS -lnsl")
fi
have_inet_aton="no"
AC_CHECK_FUNC(inet_aton, have_inet_aton="yes")
if test $ac_cv_func_inet_aton = no; then
    AC_CHECK_LIB(resolv, inet_aton,
	have_inet_aton="yes"
	EXTRALIBS="$EXTRALIBS -lresolv")
fi
if test $have_inet_aton = "yes"; then
    AC_DEFINE(HAVE_INET_ATON, 1, [Define if you have the inet_aton function.])
fi
unset have_inet_aton

dnl
dnl Check for broken inet_ntoa ()
dnl
dnl  It's not really that inet_ntoa() is broken. Some (old) gcc versions
dnl  on IRIX handle small structs wrong. As of gcc 2.95 this should be
dnl  fixed but we don't really know. To work around we implement inet_ntoa()
dnl  on our own if it does not work.
dnl
AC_MSG_CHECKING([whether inet_ntoa is broken])
AC_TRY_RUN([#include <stdio.h>
    #include <sys/types.h>
    #include <netinet/in.h>
    #include <arpa/inet.h>
    main () {
	struct in_addr ip;
	ip.s_addr = htonl (0x12345678);
	if (strcmp (inet_ntoa (ip), "18.52.86.120"))
	    exit (0);
	exit (1);}],
   AC_MSG_RESULT([yes (gcc on IRIX)])
   AC_DEFINE(BROKEN_INET_NTOA, 1, [Define if inet_ntoa function is broken.]),
   AC_MSG_RESULT(no))


dnl
dnl Check for typedef socklen_t in <sys/socket.h>.
dnl
AC_MSG_CHECKING([for socklen_t])
AC_EGREP_HEADER(socklen_t,
    sys/socket.h,
    AC_MSG_RESULT([yes]),
    AC_MSG_RESULT([no])
    AC_DEFINE(socklen_t, int, 
    [Define to \`int' if <sys/socket.h> doesn't define.]))

dnl
dnl Check for the typedef SOCKET, INVALID_SOCKET and HANDLE in <winsock.h>.
dnl
socket_defined=no
handle_defined=no
invalid_defined=no

if test "$MINGDIR" != "no"; then
    AC_CHECK_HEADER(winsock.h, 
	socket_defined=yes
	handle_defined=yes
	invalid_defined=yes
	AC_DEFINE(Win32_Winsock, 1, 
	    [Define if you are using Windows Socket-API (not CYGWIN).])
	AC_DEFINE(HAVE_WINSOCK_H, 1, 
	    [Define if you have the <winsock.h>]))
fi

if test $socket_defined = no; then
    AC_DEFINE(SOCKET, int, [Define to 'int' if <winsock.h> doesn't define.])
fi
if test $handle_defined = no; then
    AC_DEFINE(HANDLE, int, [Define to 'int' if <winsock.h> doesn't define.])
fi
if test $invalid_defined = no; then
    AC_DEFINE(INVALID_SOCKET, 
    -1, [Define to -1 if <winsock.h> doesn't define.])
fi

dnl Check for Windows NT.

if test $socket_defined = yes; then
    AC_MSG_CHECKING([for extensions in winsock.h])
    AC_EGREP_HEADER(WSA_INVALID_HANDLE, winsock.h,
	AC_DEFINE(HAVE_WSOCK_EXT, 
	    1, [Define if 'winsock.h' defines some more constants.])
	AC_MSG_RESULT(yes),
	AC_MSG_RESULT(no))
fi

unset invalid_defined
unset socket_defined
unset handle_defined

dnl
dnl Determine the return type of signal handlers.
dnl
AC_TYPE_SIGNAL
if test $ac_cv_type_signal != void ; then
    AC_DEFINE(NONVOID_SIGNAL, 1, [Define if signal()s are non-void.])
fi

AC_TYPE_SIZE_T
AC_TYPE_OFF_T

dnl
dnl Checking for crypt() function.
dnl

MKPASSWORD=""
if test $define_enable_crypt = yes ; then
    have_crypt=no
    AC_CHECK_FUNC(crypt, have_crypt=yes,
	AC_CHECK_LIB(descrypt, crypt, 
	    have_crypt=yes
	    EXTRALIBS="$EXTRALIBS -ldescrypt",
	    AC_CHECK_LIB(crypt, crypt, 
		have_crypt=yes
		EXTRALIBS="$EXTRALIBS -lcrypt")))

    if test $have_crypt = yes ; then
	AC_DEFINE(HAVE_CRYPT, 1, [Define if you have the crypt function.])
	MKPASSWORD="mkpassword"
    fi
    unset have_crypt
fi
unset define_enable_crypt
AC_SUBST(MKPASSWORD)

dnl
dnl Check for hstrerror(), h_errno and strsignal() functions.
dnl

AC_CHECK_FUNCS(strsignal hstrerror)
AC_MSG_CHECKING([for h_errno])
AC_EGREP_HEADER(h_errno, netdb.h,
    AC_DEFINE(HAVE_H_ERRNO, 1, [Define if h_errno is supported.])
    AC_MSG_RESULT(yes),
    AC_MSG_RESULT(no))

dnl
dnl Check for times().
dnl
AC_CHECK_FUNCS(times poll)

dnl Find a working inline.
save_cflags="$CFLAGS"
CFLAGS="$CFLAGS $CPPEXTRAFLAGS"
AC_C_INLINE
CFLAGS="$save_cflags"
unset save_cflags

LIBS="$LIBS $EXTRALIBS"
CPPFLAGS=$CPPEXTRAFLAGS

TIMESTAMP=`date`
AC_SUBST(TIMESTAMP)

dnl
dnl Output files.
dnl
AC_OUTPUT(
    Makefile 
    src/Makefile 
    src/awcs-server/Makefile
    src/coserver/Makefile
    src/ctrl-server/Makefile
    src/http-server/Makefile
    src/irc-core/Makefile
    src/irc-server/Makefile
    src/foo-server/Makefile
    src/q3key-server/Makefile
    src/nut-server/Makefile
    doc/Makefile 
    version.h)

dnl
dnl Print results.
dnl
AC_MSG_RESULT([])
AC_MSG_RESULT([	$PACKAGE version $VERSION configured successfully.])
AC_MSG_RESULT([])

dnl
dnl Start configuring sizzle.
dnl

if test "$sizzle_src" != "no"; then
  cache_file="`pwd`/$cache_file"
  export CPPFLAGS

  ([cd $sizzle_dir && sh ./configure \
     --disable-shared \
     --enable-static \
     --disable-debug \
     --disable-posix \
     --disable-regexp \
     --disable-nls \
     --disable-dl \
     --disable-maximum-functionality \
     --disable-readline \
     --without-included-gettext \
     --without-catgets \
     --with-mingw=$MINGDIR \
     --cache-file=$cache_file])
fi
