-- 
-- INSTALL
-- 
-- install instructions.
-- 
-- Copyright (C) Free Software Foundation
-- Portions Copyright (C) 1999 Martin Grabmueller <mgrabmue@cs.tu-berlin.de>
-- Portions Copyright (C) 2000 Stefan Jahn <stefan@lkcc.org>
-- 
-- This is free software; you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 2, or (at your option)
-- any later version.
-- 
-- This software is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
-- 
-- You should have received a copy of the GNU General Public License
-- along with this package; see the file COPYING.  If not, write to
-- the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
-- Boston, MA 02111-1307, USA.  
--

Compilation and Installation:
-----------------------------

   The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation.  It uses
those values to create a `Makefile' in each directory in the source
tree.

   Finally, it creates a shell script `config.status' that you can run
in the future to recreate the current configuration, a file
`config.cache' that saves the results of its tests to speed up
reconfiguring, and a file `config.log' containing compiler output
(useful mainly for debugging `configure').

   If you need to do unusual things to compile, please try to figure
out how `configure' could check whether to do them, and mail diffs or
instructions to the maintainer of this package (see the file AUTHORS
in the top level directory of the distribution for the email address)
so they can be considered for the next release.  If at some point
`config.cache' contains results you don't want to keep, you may remove
or edit it.

   The file `configure.in' is used to create `configure' by a program
called `autoconf'.  You only need `configure.in' if you want to change
it or regenerate `configure' using a newer version of `autoconf'.

The simplest way to compile this package is:

  1. `cd' to the directory containing the package's source code and
     type `./configure' to configure the package for your system.  If
     you're using `csh' on an old version of System V, you might need
     to type `sh ./configure' instead to prevent `csh' from trying to
     execute `configure' itself.

     Running `configure' takes awhile.  While running, it prints some
     messages telling which features it is checking for.

  2. Type `make' to compile the package.

  3. Type `make install' to install the programs and any data files
     and documentation.

  4. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package
     for a different kind of computer), type `make distclean'.


Compilers and Options:
----------------------

   Some systems require unusual options for compilation or linking
that the `configure' script does not know about.  You can give
`configure' initial values for variables by setting them in the
environment.  Using a Bourne-compatible shell, you can do that on the
command line like this: CC=c89 CFLAGS=-O2 LIBS=-lposix ./configure

Or on systems that have the `env' program, you can do it like this:
     env CPPFLAGS=-I/usr/local/include LDFLAGS=-s ./configure

   Here is list of the available './configure' script options. All 
given '--enable-<?>' options can be disabled via '--disable-<?>' 
or '--enable-<?>=no'. 

`--enable-warn'
	With this option you enable the detection of various compiler
	warning switches. Most guessed options come from GCC.
`--enable-opt'
	When enabling this feature the configure script tries some of the
	commonly known compiler optimization switches.
`--with-opt=FLAGS'
	You can pass here a comma separated list of additional compiler
	flags which will be tested. This feature is only active if you
	specified the above `--enable-opt' switch.
`--enable-ppro'
	If you want to compile for the i686 target try this option.
`--enable-486'
	Compiler optimizations for the i486 target of GCC. If you passed
	'--enable-ppro' and this options could be used, then the i486 option
	will be silently dropped.
`--enable-debug'
	All of the debug messages (debug: some annoying crap text) can be 
	suppressed by setting the debug level (-v). If you do not want these
	messages build in at all then disable this feature.
`--enable-control-proto'
	If you enable this feature the control protocol will be supported by
	serveez. This protocol is for remote control the server.
`--enable-irc-proto'
	When enabling this command switch you tell the software package to
	support the IRC (Internet Relay Chat) protocol.
`--enable-irc-ts'
	This option is only available if you enabled the IRC protocol at all.
	If you enabled both of them the serveez will support the so called
	TimeStamp protocol which is is a EFNet extension of the original IRC
	protocol. In order to connect to EFNet you MUST use this option.
`--enable-awcs-proto'
	In order to use the serveez software for the textSure (C) chat system
	you MUST enable this option.
`--enable-http-proto'
	When using the serveez as part of the textSure (C) chat system you 
	will have need of an additional web server. This option makes 
	serveez support a simple HTTP protocol.
`--enable-flood'
	If you enable this feature the serveez will support a simple builtin 
	flood protection. It is always useful to protect the software from
	flood clients.
`--with-guile=DIR'
	The DIR argument specifies a guile installation directory.
`--with-guile-source=DIR'
	If the user wants to link serveez against a static guile core library
	you can pass the DIR argument to specify the location of a guile
	source distribution which will be configured and built then.
`--with-mingw=DIR'
	When compiling under Windows the DIR argument specifies the path
	to the extra MinGW32 library and header files. If you want the
	final executable depend on the Cygwin project's cygwin1.dll you have
	to disable this option by passing configure script '--without-mingw'
	or '--with-mingw=no'.
`--enable-sntp-proto'
	Thereby you enable the support for a simple network time protocol
	server.
`--enable-poll'
	If the target system supports poll() and this option is enabled
	the main file descriptor loop is done via poll(). This helps to
	work around the (g)libc's file descriptor limit. Otherwise we
	always fall back to the select() system call.
`--enable-sendfile'
	Enables the usage of the sendfile() system call. The option helps
	to work around bogus implementations of this feature if you disable
	it via `--disable-sendfile'.
`--enable-gnutella'
	If you do not want the gnutella spider client compiled in you need
	to disable this option.
`--enable-crypt'
	This option tells serveez to process any passwords as crypt()ed.
`--enable-tunnel'
	If you enable this feature the port forwarder will be included. 
	This is useful if you plan to use serveez as a gateway or firewall
	workaround.
`--enable-fakeident'
	By enabling this you will get a fake ident server included into
	the binary executable.
`--enable-guile-server'
	If you enable this feature the user is able to write servers with
	guile. This is yet experimental.

Please read the README file also.
