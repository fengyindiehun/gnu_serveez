\input texinfo
@c %**start of header
@setfilename serveez.info
@settitle Serveez Documentation
@c %** end of header

@include version.texi

@set PACKAGE Serveez
@set s_PACKAGE serveez
@set SIZZLE Sizzle
@set s_SIZZLE sizzle
@set b_SIZZLE SIZZLE

@titlepage
@title @value{PACKAGE}, version @value{VERSION}
@subtitle A server framework
@subtitle Edition @value{EDITION},  @value{UPDATED}
@author Stefan Jahn
@author Raimund Jacob

@page
@vskip 0pt plus 1filll

Copyright @copyright{} 2000 Stefan Jahn <stefan@@lkcc.org>@*
Copyright @copyright{} 2000 Raimund Jacob <raimi@@lkcc.org>@*
Copyright @copyright{} 1999 Martin Grabmueller <mgrabmue@@cs.tu-berlin.de>@*

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1
or any later version published by the Free Software Foundation.
A copy of the license is included in the section entitled "GNU
Free Documentation License".

@end titlepage

@node Top, Introduction, (dir), (dir)

@menu
* Introduction::          Introduction to @value{PACKAGE}
* Using @value{PACKAGE}:: Startup and command line options
* Concept::               Conceptional thoughts
* Server::                Server implementation
* Co-Server::             Co-Server implementation
* Porting issues::        Support of different platforms and operating systems
* Bibliography::          Useful documents we refer to
* License::               GNU General Public License
@end menu

@node Introduction, Using @value{PACKAGE}, Top, Top
@chapter Introduction

@value{PACKAGE} is a server framework. It provides routines and help for
implementing IP based servers (currently TCP, UDP and ICMP). We think it is
worth the effort because many people need server functionality within
their applications. However, many people experience problems with select()-
or poll()-loops and non-blocking operations.
This application demonstrates various aspects of advanced network
programming in a portable manner. It is known to compile and run on
32 bit and 64 bit Un*x flavours as well as on M$ Windows (9x/NT/2000).
You can use it for implementing your own servers or for understanding how
certain network services and operations work.
The package includes a number of servers that work already: a HTTP server,
an IRC server, a Gnutella spider and some others. One of the highlights is
that you can run all protocols on the same port. The application itself is
single threaded but it uses helper processes for concurrent name resolution
and ident lookups.

@node Using @value{PACKAGE}, Concept, Introduction, Top
@chapter Using @value{PACKAGE}

@section Starting @value{PACKAGE}

To start @value{PACKAGE} simply type @samp{@value{s_PACKAGE}} at your 
command line prompt and press @key{RET}. This will invoke the 
@file{@value{s_PACKAGE}.[exe]} which will read its configuration 
from a file called @file{@value{s_PACKAGE}.cfg} in the current 
directory and run the server loop afterwards. Press @key{^C} to abort 
the execution of this program.

@section Command line options

@table @code
@item -h, --help
Display this help and exit.
@item -V, --version
Display version information and exit.
@item -i, --iflist
List local network interfaces and exit.
@item -f, --cfg-file=FILENAME
File to use as configuration file (@value{s_PACKAGE}.cfg).
@item -v, --verbose=LEVEL
Set level of logging verbosity.
@item -l, --log-file=FILENAME
Use FILENAME for logging (default is stderr).
@item -P, --password=STRING
Set the password for control connections.
@item -m, --max-sockets=COUNT
Set the maximum number of socket descriptors.
@item  -d, --daemon
Start as daemon in background.
@end table

@section Configuring @value{PACKAGE}

As noted above @value{PACKAGE} is configured via a configuration 
file which is by default @file{@value{s_PACKAGE}.cfg} and can be set 
by passing the -f command line argument. We are using the Scheme 
dialect called @value{SIZZLE} for this configuration file. This 
package is maintained by Martin Grabmueller 
(@email{mgrabmue@@cs.tu-berlin.de}). Because we do not want you to 
learn too much about that computer language we delivered an example 
configuration file in the @file{data/} directory.

Generally you can determine special variables in this file and you have
to instantiate the servers you actually want to run. The following
example shows how do you setup a server whose short name is @samp{xxx}.
The @samp{?} is the instance number of that server. You can define
more than one @samp{xxx-server}, of course. The body of such a server
hash contains key value pairs which set up this specific server.
@xref{Existing Servers}, for more information about these pairs.

@example
(define xxx-server? '#@{
                        "key" => value
                      @})
@end example

When we are referring to @samp{port configuration}s this is a special hash
determining a network or file system configuration. This structure has got
the following layout:

@example
"NameOfPortCfg" => #@{
                       ;; one of those possibilities
                       "proto"    => "tcp" || "udp" || "pipe" || "icmp"
                       ;; tcp or udp port number
                       "port"     => 42420
                       ;; ip address to bind the server to
                       "local-ip" => "*" || xxx.xxx.xxx.xxx
                       ;; receiving pipe
                       "inpipe"   => "MyRecvPipe"
                       ;; sending pipe
                       "outpipe"  => "MySendPipe"
                    @}
@end example

@node Concept, Server, Using @value{PACKAGE}, Top
@chapter Concept

@section I/O Strategy
@value{PACKAGE}'s I/O strategy is the traditional @code{select()} method. It 
is serving many clients in a single server thread. This is done by setting to 
non-blocking mode on all network handles, and use @code{select()} to tell 
which network handle has data waiting. This is the traditional favorite. 

An important bottleneck in this method is that @code{read()} or 
@code{sendfile()} from disk blocks if the page is not in core at the 
moment, setting non-blocking mode on a disk file handle has no effect. 
Same thing goes for memory-mapped disk files. The first time a server
needs disk I/O, its process blocks, all clients must wait, and that 
raw non-threaded performance goes to waste. 

Unfortunately, @code{select()} is limited to @code{FD_SETSIZE} handles. 
This limit is compiled in to the standard library and user programs. 
Nevertheless @value{PACKAGE} is able to serve about one thousand and more 
clients on Linux, a hundred on Win95 and some more on later Windows systems.

We chose this method anyway because it seems the most portable. Either in
most Unices and Win32 this method is implemented.

An alternative method to multiplex client network connections is 
@code{poll()}. When detected by @file{configure} @value{PACKAGE} is 
using it. This will work around the builtin (g)libs's @code{select()} 
file descriptor limit.

@section Limits on open filehandles
@table @code

@item Any Unix
The limits set by @code{ulimit ()} or @code{setrlimit ()}.

@item Solaris
See the Solaris FAQ, question 3.45.

@item FreeBSD 
Use sysctl -w kern.maxfiles=nnnn to raise limit.

@item Linux
See Bodo Bauer's /proc documentation. On current 2.2.x kernels, 
@example
echo 32768 > /proc/sys/fs/file-max
echo 65536 > /proc/sys/fs/inode-max
@end example
increases the system limit on open files, and 
@example
ulimit -n 32768
@end example
increases the current process' limit. I verified that a process on 
Red Hat 6.0 (2.2.5 or so plus patches) can open at least 31000 file 
descriptors this way. Another fellow has verified that a process on 
2.2.12 can open at least 90000 file descriptors this way (with 
appropriate limits). The upper bound seems to be available memory. 

@item Windows 9x/ME
On Win9x machines, there's quite-low limit imposed by the kernel: 
100 connections. You can increase this limit by editing the registry
key HKLM\System\CurrentControlSet\Services\VxD\MSTCP\MaxConnections. 
On Windows 95, the key is a DWORD; on Windows 98, it's a string. 
I've seen some reports of instability when this value is increased 
to more than a few times its default value.

@item Windows NT/2000
More than 2000 connections tested. Seems like the limit is due to
available physical memory.
@end table

@node Server, Co-Server, Concept, Top
@chapter Server

@menu
* Introduction to Servers::     Protocol servers in @value{PACKAGE}
* Writing Servers::             How to write internet protocol servers
* Existing Servers::            Which kind of servers do we have already ?
@end menu

@node Introduction to Servers, Writing Servers, Server, Server
@section Introduction to Servers

This package includes a kind of server server. It allows different 
protocol servers to listen on various TCP or UDP ports, on ICMP sockets
or on named pipes and server instantiating. Thus it is possible to to 
have different servers on the same port.

This chapter covers all questions about how to write your own internet
protocol server with little help of this package. Most of the usual tasks of
such a server have got their generic solutions which could be shadowed by 
your own routines. There are some examples within this package showing the
possibilities and one very simple example how to implement such a server.

The foo server does not do anything at all and is of no use actually
but could be a basis for a new protocol server. We are now going to describe
how this specific server works. Eventually the reader might have got an idea
what is going on here.

@node Writing Servers, Existing Servers, Introduction to Servers, Server
@section Writing Servers

@subsection Making and configuring preparations

@value{PACKAGE} is configured and build via automake and autoconf. That
is why you are not supposed to write your own Makefiles but simplified
@file{Makefile.am}s. Automake will automatically generate dependencies and
compiler and linker command lines. Here are the steps you basically need 
to follow:

@itemize @bullet
@item
Change to the @file{src/} directory in the source tree.

@item
Edit the @file{Makefile.am}. Add your sub directory name and library name
which you are going to create.

@item
Now create the sub directory and change into it.

@item
You need to create a new @file{Makefile.am} therein. If you want to have
this file @file{configure}d you need to add a further line to the 
@code{AC_OUTPUT()} statement in @file{configure.in}.
You have to put at least the following into the newly created
@file{Makefile.am}:

@example
noinst_LIBRARIES = libfoo.a
AM_CPPFLAGS = -I..
CLEANFILES = *~
libfoo_a_SOURCES = foo-proto.h foo-proto.c
@end example

@item
Just have a look at all the other server directories. For more information
about automake read the info pages.

@end itemize

@subsection Server header file @file{foo-proto.h}

This file contains at least your servers configuration structure and
some global definitions of server routines which must be available outside.
Furthermore it contains the global definition of your server definition. The
foo server implements all kinds of configurations items which could be
integers, string arrays, strings, integer arrays, port configurations and
hashes. Every thing within this configuration will be configurable within
the configuration file later.

@subsection Server implementation file @file{foo-proto.c}

If you want to define default values for your configuration you have
to define it somewhere and put it into the default configuration structure.
This structure will be used to instantiate your server. In this case we 
called it simply `mycfg'.

In order to associate the configurations items in a server 
configuration to keywords within the configuration file you have to define a
array of key-value-pairs. This is done in the `foo_config_prototype' field.
There are several macros which make different associations. These are the
REGISTER_* macros which take three arguments. The first argument is the
keyword which will occur in the configuration file, the second is the
associated item in your default configuration structure and the last argument
specifies if this item is defaultable or not.

@subsection Server definition

The server definition is the representation of your server object 
which will be instantiatable. You have to put in this structure a long and
a short description of your server. The short name will be used to instantiate
the server object via the configuration file. You can instantiate it by
writing @code{(define foo-server1 '#@{ ... @})} where @code{foo} is your 
servers short name. Moreover you have to put there the server 
callbacks which will be described later and the configuration 
associations described above.

@subsection Server callbacks

There are several callback routines, which get called in order to 
instantiate the server and for describing the actual behaviour of your server.
Here is the description of all of these.

@table @code
@item global initializer (optional)
This callback is executed once for initializing the server. Here you can
initialize data or whatever shared by all instances of your server. For
instance the http server would load the mime type file here. The foo
server creates its default hash property because a hash cannot be
statically initialized.

@item global finalizer (optional)
If you want to free shared resources which were possibly allocated within
the global initializer you can do so here. The foo server frees its
default hash previously allocated in the global initializer.

@item instance finalizer (optional)
The server instance finalizer gets its instance representation as argument.
You have to free all resources used by this server instance. The foo server
destroys its hash if it was not the default hash which gets freed within
the global finalizer.

@item instance initializer (mandatory)
Within this routine you can initialize all you might need for one instance
of your server. Secondly you have to bind this instance to some port
configuration. In most cases you want to have this port configuration
accessible via the configuration file. Therefore you have to 
REGISTER_PORTCFG () in your servers configuration definition. The port
configuration is then part of your servers instance configuration
structure. The foo server prints its whole configuration just for debugging
purposes. It simply shows how configurable items from the configuration
file fall to the server instance configuration. If you are going to plan
that one server instance listens on different ports you can do so.

@item protocol detection (mandatory)
Because it is possible to have more than one server listening on one 
network port we are going to detect the type of client which is connecting
to this port. The foo servers checks if the first five bytes the client
was sending is identifying it as a foo client. This routine is getting
two arguments where the first one is a pointer to this servers instance
configuration and the second is the client socket object containing all
information of the client connection. This structure is describe a bit
later. Be patient. For successful client detection return non-zero 
otherwise zero.

@item connect socket (mandatory)
If the client detection signaled success this routine is called to assign
the client connection to this servers instance. The arguments are just
the same as in the detection routine. In this callback you can assign
all the connection specific callbacks for your server and do some initial
things. The foo server sets the @code{check_request} callback to the 
@code{default_check_request} which is using the packet delimiter 
information to find whole packets. When a client sent such a packet the 
@code{handle_request} callback is executed. That is why the foo server 
assigns the @code{handle_request} method.

@item client info (optional)
If this callback is given the control protocol 
(@xref{Control Protocol Server}.) can give information about a specific
client if requested with @samp{stat id NUM}. The first arguments given
is the server configuration hash and the second one the clients socket
structure. You must return a static single line character string.

@item server info (optional)
When listing the server instances via @samp{stat all} within the control
protocol (@xref{Control Protocol Server}.) the returned character string
which might be multiline separated by @code{\r\n} (no trailing separator).
Usually you will return all the server configuration information.

@item timer (optional)
If this callback is non-NULL it is called whenever there is some time 
left. It gets the server instance itself as argument. Actually it gets
called every second.

@item handle request (mandatory for UDP and ICMP servers)
The arguments to this callback specify a whole packet, its address and the
length. When implementing a UDP server you need to return non-zero if your
server could process the packet and zero otherwise. Thus it is possible that
there are multiple UDP servers on a single port. Same goes for ICMP servers.
@end table

@subsection Make your server available

You distribute your server by editing the @file{server.c} file in the
@file{src/} directory. There you have to include the the servers header 
file and add the server definition to the @code{all_server_definition} array.

@subsection More detailed description of the callback system and structures

The client connection information is stored within the socket_t 
object. All of the client connection specific callbacks get this object as
first argument. Here follows a description of the elements of this object.

@table @code
@item id
The socket id is a unique id for a client connection.

@item version
This item validates this socket structure. If you pass the @code{id} and
@code{version} to a Co-Server you can check if the delivered socket 
structure is the original or not within the Co-Server callback.

@item flags
The flag field of the client connection contains informations about the
state of this connection. See @file{socket.h} in the @file{src/} directory 
for more information. Basically this bitfield specifies how this object
is handle by the main server loop.

@item userflags
This bitfield could be used for protocol specific information. You can use
is for any information.

@item boundary, boundary_size
If you are going to write a packet oriented protocol server you can use
the default_check_request method to parse packets. These two properties
describe the packet delimiter.

@item send_buffer, send_buffer_size, send_buffer_fill
This is the outgoing data for a client connection object.

@item recv_buffer, recv_buffer_size, recv_buffer_fill
Within the receive buffer all incoming data for a connection object is 
stored. This buffer is at least used for the client detection callback.

@item read_socket
This callback gets called whenever data is available on the socket.
Normally, this is set to a default function which reads all available
data from the socket and feeds it to check_request, but specific
sockets may need another policy.

@item write_socket
This routine is called when data is is valid in the output buffer
and the socket gets available for writing.  Normally, this simply
writes as much data as possible to the socket and removes it from
the send buffer.

@item disconnected_socket
This gets called whenever the socket is lost for some external reason.

@item connected_socket
If some piece of code tries to connect to another host via 
@code{sock_connect} this connection might be established some time later.
Thus this callback gets called whenever the socket is finally connected.

@item kicked_socket
We call this whenever the socket gets closed by us.

@item check_request
This gets called whenever data was read from the socket.
Its purpose is to check whether a complete request was read, and
if it was, it should be handled and removed from the input buffer.

@item handle_request
This gets called when the check_request got a valid packet. The request
arguments contains the actual packet and the second argument is the
length of this packet including the packet delimiter.

@item idle_func
This callback gets called from the periodic task scheduler. Whenever
idle_counter (see below) is non-zero, it is decremented and
idle_func gets called when it drops to zero. idle_func can reset
idle_counter to some value and thus can re-schedule itself for a
later task.
 
@item idle_counter
Counter for calls to @code{idle_func}.

@item data
Miscellaneous field. Listener keeps array of server instances here.
This array is NULL terminated. Some servers store server specific 
information here.

@item cfg
When the final protocol detection in default_detect_proto
has been done @code{cfg} should get the actual configuration hash.
@end table

@subsection Using Co-Servers

Co-Servers are designed to complete blocking tasks. There are several
Co-Servers implemented. These are the dns, reverse dns and ident Co-Server.
If you want to use these you have to @code{#include "coserver/coserver.h"}. 
Secondly you need to implement the callback which gets called when a 
Co-Server completed its task. This routine must be a 
@code{coserver_handle_result_t}. The first argument is the actual Co-Server 
result which might be NULL if the request could not be fulfilled and the 
later two arguments are the arguments you specified yourself invoking the 
request. To invoke a Co-Server request you use one of the coserver_* macros. 
The foo server uses the reverse dns Co-Server to identify the host name 
of the remote client.

@node Existing Servers,  , Writing Servers, Server
@section Existing Servers

@menu
* Chat Server::                 Chat Server (aWCS, textSure) description
* HTTP Server::                 Integrated Web Server description
* IRC Server::                  EFNet IRC Server
* Control Protocol Server::     @value{PACKAGE} control center
* Foo Server::                  Example server implementation
* Quake III Key Server::        Quake 3 License Key Server description
* Gnutella Spider::             Gnutella Client description
* Tunnel Server::               Description of the port forwarder
@end menu

@node Chat Server, HTTP Server, Existing Servers, Existing Servers
@subsection Chat Server

@subsubsection General description

The whole @value{PACKAGE} package was originally written by Martin 
Grabmueller for a fast C backend for a chat system (now called textSure). 
This can be found at @uref{http://www.textsure.net/}. The server 
implements two kinds of protocols, one for the master server which 
should do all the administrative stuff and the second for the chat 
clients. Basically the chat server is a simple multicast unit.

@subsubsection Specification of the Slave/Master server protocol of aWCS

@table @asis
@item Master server
The first client that connects and sends an aWCS initialize message
(see below) becomes the master server.
When the master server disconnects, all clients get kicked.

@item Other clients
All other clients have to send the aWCS client initialize message,
which is the string "aWCS\0" (note the final NUL character, which is
part of the message). Messages received from those clients are simply
sent to the master server with the client number of the sender
prefixed (see `Messages from clients').

@item Message format
A request consists of a sequence of characters terminated with the
NUL character '\0'.

@item Messages from clients
All messages from clients are routed to the master server, but
modified in such a way that 4 digits and one space precede the
original message. These 4 digits are the (decimal) client's id
right-padded with zeroes.

@item Messages from the master server
Messages that come from the master server must have the following
format:

The first character is one of the following and has a special meaning:

@multitable @columnfractions .15 .85
@item character
@tab meaning
@item 0
@tab Send message to all clients.
@item 1
@tab Send message to the clients denoted in the message.
@item 2
@tab Report status to the master server.
@item 3
@tab Kick the clients denoted in the message.
@item 4
@tab Turn off flood protection for the clients in the message.
@item 5
@tab Turn on flood protection for the clients in the message.
@item 6
@tab Initialization message.
@end multitable

Those special characters are followed by a single space.

Messages which require additional parameters (multicast for example)
carry these parameters after the space in a comma separated list of
client ids in the above format.  The client id list is terminated
by the \0 character terminating the request (if no parameters follow)
or by a single space (if parameters follow).  Note that in comma
separated lists, no spaces are allowed.

@example
Example:

0 Hallo Welt\0
  - Send "Hallo Welt\0" to all clients except the 
    master server.

1 0001,0004,0006 Gruezi!\0
  - Send "Gruezi\0" to the clients 1, 4 and 6.

2 \0
  - Send status data back to the master server.

3 0003,0004\0
  - Kicks clients 3 and 4.

4 0004,0016\0
  - Turn off flood protection for clients 4 and 16.

5 0001,005\0
  - Turn on flood protection for clients 1 and 5.

6 \0
  - Initialize data structures and accept the 
    connection as the master server.
@end example

@item Status messages for the master server
The low level server posts messages to the master server on several
occasions, for example when clients connect, disconnect etc.

Status messages have the same format as other client messages for the
master server.  The client number in the message is 0000, followed by a
space, the status message type and additional parameters.

@multitable @columnfractions .08 .4 .52
@item Type
@tab Description
@tab Parameter
@item 0
@tab Client has connected.
@tab Client id, client IP number:port
@item 1
@tab Client has disconnected.
@tab Client id, error code
@item 2
@tab Client got kicked.
@tab Client id, kick reason
@item 3
@tab Low level server is alive.
@tab 42
@item 4
@tab Notify time elapsed.
@tab 42
@end multitable

@multitable @columnfractions .2 .8
@item Error code
@tab Description
@item 0
@tab Success
@item 1
@tab Client closed connection
@end multitable

@multitable @columnfractions .2 .8
@item Kick reason
@tab Description
@item 0
@tab Flooding
@item 1
@tab Output buffer overflow
@end multitable

@end table

@subsubsection Configuration

@table @code
@item netport
The @code{netport} parameter is the default network port configuration
where you can specify the network port and IP address.

@item fsport
This parameter could be used to specify two named pipes as connection
device. This is thought for a local installations of the master server
and @value{PACKAGE}.
@end table

@node HTTP Server, IRC Server, Chat Server, Existing Servers
@subsection HTTP Server

@subsubsection General description

The actual reason for writing this server was the need of an additional
web server when using the chat system because the chat client is a web
applet which can only connect to servers where the original html document
with the applet tag came from. Thus you would have need for a standalone
web server on the same machine where @value{PACKAGE} is running... 
except @value{PACKAGE} would serve these documents too.

The integrated HTTP server was originally thought to be a simple but fast
document server. But now it can even execute CGI scripts. Both the methods
GET and POST are full featured, HEAD too. Additionally it produces 
directory listings when no standard document file 
(e.g. @file{index.html}) has been found at the requested document node. 
Furthermore it implements a file cache for speeding up repetitive 
HTTP request.

In comparison to other web server projects like Apache and Roxen this
web server is really fast. Comparative benchmarks will follow.
The benchmark system is a 233 MHz Mobile Pentium MMX. Both the server and
the client (http_load - multiprocessing http test client) ran on the same
computer.

@table @code
@item Small files
The small-file test load consists of 1000 files, each 1KB long, requested 
randomly.

@example
concurrent fetches   1   10   50  100  200  500  1000
hits/second        501  520  481  475  420  390   295
@end example

@item CGI
The CGI test load consists of a trivial "hello world" C program. I noticed
Linux to throw "Resource temporarily unavailable" errors when fork()ing
very fast. This limits the test to about 200 concurrent fetches on the
test system.

@item Large files
The large-file test load consists of 100 files, each 1MB long, requested 
randomly. Also, each connection is throttled to simulate a 33.6Kbps modem. 
Note that 1000 33.6Kbps connections is 3/4 of a T3. There was no problem to
get 1000+ concurrent fetches.
@end table

@subsubsection Configuration

The following options can be set within the configuration file.

@table @code
@item netport
This is the TCP port configuration hash wherein you can set the 
IP address this server should be bind to and the port the server is 
listening.

@item indexfile
The @code{indexfile} parameter is the default file served by the HTTP 
server when the user does not specify a file but a document node
(e.g. @uref{http://www.textsure.net/}).

@item docs
The @code{docs} parameter is the document root where the server finds its
web documents.

@item userdir
Each @samp{~user} request gets converted into the given users home
directory. The string will be appended to this directory. Its default
value is @samp{public_html}.

@item cgi-url
This parameter is the first part of the URL the HTTP server identifies a
CGI request. For instance if you specify here @file{/cgi-bin} and the
user requests @uref{http://www.textsure.net/cgi-bin/test.pl} then the
HTTP server tries to execute the program @file{test.pl} within the
@code{cgi-dir} (see below) and pipes its output to the user.

@item cgi-dir
The @code{cgi-dir} is the CGI document root.

@item cgi-application
Within the MinGW32 and native port you can use this hash to associate
certain file suffixes with applications on your computer (e.g. "pl" with
"perl"). This is necessary because there is no possibility to check whether
a file is executable or not in Win32.

@item cache-size
Here you might specify a maximum file size for documents which could be
stored within the HTTP file cache.

@item cache-entries
This parameter specifies the maximum amount of HTTP file cache entries
(files). When you instantiate more than one HTTP server the biggest value
wins. This is why the HTTP file cache is shared by all HTTP servers.

@item timeout
The @code{timeout} value is the amount of time in seconds after which 
a kept alive connection (this is a HTTP/1.1 feature) will be closed when
this connection has been idle.

@item keepalive
On one KeepAlive-connection can be served @code{keepalive} documents 
at all. Then the connection will be closed.

@item default-type
The @code{default-type} is the default content type the HTTP server
assumes if it can not identify a served file by the @code{types} hash
and the @code{type-file} (see below).

@item type-file
This should be a file like the @file{/etc/mime.types} on Linux systems.

@item types
If you want to specify special content types do it here. This parameter
is a has associating file suffixes with HTTP content types.

@item admin
Your address, where problems with the server should be e-mailed.
This address appears on some server-generated pages, such as error
documents.

@item host
This item allows you to set a host name which is sent back to clients for
your server if it's different than the one the program would get. Be
aware that you cannot invent such a name.

@item nslookup
If this number is non-zero the HTTP server invokes a reverse DNS lookup
for each client connection in order to replace the remote ip address with
the remote host name in the access logfile.

@item logfile
The location of the access logfile. Each HTTP request gets a line within
this file.

@item logformat
The format of the access logfile. There are special placeholders for
different kinds of logging information.

@table @code
@item %h
the remote host name the request came from
@item %t
when was the entity accessed
@item %u
what kind of entity was requested
@item %r
which document referred to this document
@item %a
what kind of web browser did the remote client use
@item %c
the http response return code for this request
@item %l
delivered content length in bytes
@end table
@end table

@node IRC Server, Control Protocol Server, HTTP Server, Existing Servers
@subsection IRC Server

@subsubsection General description

The integrated IRC server is intended to be compatible with the EFNet.
Because there are no good possibilities to test this in real live it is
still under heavy construction but could be used as a standalone server
anyway.

IRC itself is a teleconferencing system, which (through the use of
the client-server model) is well-suited to running on many machines
in a distributed fashion. A typical setup involves a single process
(the server) forming a central point for clients (or other servers)
to connect to, performing the required message delivery/multiplexing
and other functions.

The server forms the backbone of IRC, providing a point to which
clients may connect to to talk to each other, and a point for other
servers to connect to, forming an IRC network. The only network
configuration allowed for IRC servers is that of a spanning tree
where each server acts as a central node for the rest of the
net it sees.

@subsubsection Configuration

As all the servers described in this section the IRC server is also
instantiated and configured in the configuration file. The following
table shows the provided configuration keys. Most of the configuration
items are similar to those of an Hybrid IRC server.

@table @code
@item port
The @code{port} parameter is, as in all the server configurations, the
port configuration for this server, specifying IP address and the TCP/IP 
port the server should listen on.

@item MOTD-file
When a user initially joins it will get this file's content as the
message of the day comment. When changing on disk the server will notice
that and reload the file automatically.

@item INFO-file
The @code{INFO-file}s content gets displayed when the user commits the
/INFO command.

@item tsdelta
This value is the timestamp delta value to UTC in seconds.

@item admininfo, email, location1, location2
Some administrative information delivered on the /ADMIN command.

@item M-line (Mandatory)
This IRC server's configuration. The format of this line is:
@example
":" VirtualHostName
":" OptionalBindAddress (real hostname)
":" TextName
":" Port
@end example

@item A-line (Mandatory)
The administrative info, printed by the /ADMIN command.
@example
":" administrative info (department, university)
":" the server's geographical location
":" email address for a person responsible for the irc server
@end example

@item Y-lines (Suggested)
The connection classes.
@example
":" class number (higher numbers refer to a higher priority)
":" ping frequency (in seconds)
":" connect frequency in seconds for servers, 0 for client class
":" maximum number of links in this class 
":" send queue size
@end example

@item I-lines (Mandatory)
Authorization of clients, wildcards permitted, a valid client is matched
@email{user@@ip} OR @email{user@@host}.
@example
":" user@@ip, you can specify @samp{NOMATCH} here to 
    force matching user@@host
":" password (optional)
":" user@@host
":" password (optional)
":" connection class number (YLine)
@end example

@item O-lines (Optional)
Authorize operator, wildcards allowed.
@example
":" user@@host, user@@ forces checking ident
":" password
":" nick
@end example

@item o-lines (Optional)
Authorize local operator, see above at the O lines for a description.

@item C-lines (Networked)
List of servers to connect to.
Note: C and N lines can also use the user@@ combination in order to 
check specific users (ident) starting servers. C and N lines are 
usually given in pairs.
@example
":" host name
":" password
":" server name (virtual)
":" port (if not given we will not connect)
":" connection class number (YLine)
@end example

@item N-lines (Networked)
Server which may connect.
@example
":" host name
":" password
":" server name (virtual host name)
":" password
":" how many components of your own server's name to 
    strip off the front and be replaced with a *.
":" connection class number (YLine)
@end example

@item K-lines (Optional)
Kill user, wildcards allowed.
@example
":" host
":" time of day
":" user
@end example

@end table

@node Control Protocol Server, Foo Server, IRC Server, Existing Servers
@subsection Control Protocol Server

@subsubsection General description

@value{PACKAGE} implements something like a telnet protocol for 
administrating purposes. You just need to start a telnet session like:
@example
$ telnet www.textsure.net 42420
@end example
After pressing @key{RET} you will be asked for a password which you 
might setup passing the @value{PACKAGE} the -P argument. 
@xref{Using @value{PACKAGE}}.

@subsubsection Commands

@table @samp
@item help
This command will give you a very short help screen of all available
commands within the control protocol.

@item quit
This command closes the connection to @value{PACKAGE}.

@item restart ident
Restarts the internal ident Co-Server. This is useful if you just want
to start a new one if it has died or otherwise disturbed.

@item restart dns
Restarts an internal dns lookup server.

@item restart reverse dns
Restarts an internal reverse dns lookup server.

@item killall
This might be useful if @value{PACKAGE} seems to be unstable but you do not
want to restart it. With @samp{killall} you disconnect all client
network connections except the control protocol connections.

@item kill id NUM
Disconnects a specific connection identified by its ID. These IDs will
be stated when you type @samp{stat con} (see below).

@item stat
General statistics about @value{PACKAGE}. This will show you some useful
information about the computer @value{PACKAGE} is running on and about the
state of @value{PACKAGE} in general.

@example
This is @value{s_PACKAGE} version @value{VERSION} running since Sat Jul 15 18:45:58 2000.
Features  : AWCS HTTP IRC CTRL Q3KEY NUT TUNNEL
            IDENT REVERSE-DNS DNS FLOOD DEBUG
Os        : Linux 2.2.17 on i586
Sys-Load  : user 0.9%, nice 0.0%, sys 0.0%, idle 99.0%
Proc-Load : user 0.0%, sys 0.0%, child user 0.0%, child sys 0.0%

  * 1 connected sockets (hard limit is 100)
  * uptime is 20 sec
  * 1736846 bytes of memory in 526 blocks allocated
@end example

@item stat coserver
Statistics about all running Co-Server instances.

@item stat SERVER
This command is for selecting certain Server instances to be listed.
SERVER should be one of server names which you specified in the 
configuration file.

@item stat id NUM
Show statistics about a specific connection. This will give you all
available information about every connection you specified.
@xref{Writing Servers}, for more information about how to provide these
information.

@item stat con
Connection statistics. This will give a list of all socket structures
within @value{PACKAGE}. If you want more detailed information about specific
connections, Co-Servers or Servers you need to request these information
with @samp{stat id NUM} or @samp{stat all}.

@item stat all
Server and Co-Server instance statistics. This command should list all 
the information about instantiated Servers and Co-Servers. 
@xref{Writing Servers}, for more information about how to provide these
information.

@item stat cache
HTTP cache statistics. This command produces an output something like the 
following where @samp{File} is the short name of the cache entry, 
@samp{Size} the cache size, @samp{Usage} the amount of connections 
currently using this entry, @samp{Hits} the amount of cache hits, 
@samp{Recent} the cache strategy flag (newer entries have larger numbers) 
and @samp{Ready} is the current state of the cache entry.

@example
File                      Size  Usage  Hits Recent Ready
zlib-1.1.3-20000531.zip  45393      0     0      1 Yes
texinfo.tex             200531      0     0      2 Yes
shayne.txt                2534      0     1      1 Yes

Total : 248458 byte in 3 cache entries
@end example

@item kill cache
Reinitialize the HTTP file cache.
@end table

@subsubsection Configuration

@table @code
@item netport
This option is used to define the port configuration. Here it could be
useful to declare a @code{local-ip} within this hash when you do not
want people using this protocol from outsides.
@end table

@node Foo Server, Quake III Key Server, Control Protocol Server, Existing Servers
@subsection Foo Server

The Foo Server is a simple example on how to write internet protocol
servers with @value{PACKAGE}. @xref{Writing Servers}.

@node Quake III Key Server, Gnutella Spider, Foo Server, Existing Servers
@subsection Quake III Key Server

@subsubsection Motivation

First of all, this software is probably illegal. Period.

Please buy the game. But you may need this software anyway, because
commercial software developers are narrow minded sometimes.

You just have the choice between LAN and Internet connection when running
the game. But the real choice you have is: LAN in one broadcast domain 
vs. permanent internet connection. This leaves the whole area of 
subnet'ed LANs or inhouse networks, subnet'ed LAN parties or LANs 
interconnected with phonelines. This pissed me off.

@subsubsection Configuration

Run this program on some computer and make the clients think this
computer is a key server. Add following lines to @file{/etc/hosts}
or @file{c:\windows\hosts} :
@example
127.0.0.1       authorize.quake3arena.com
@end example
Replace 127.0.0.1 by the IP address of your server machine. Perhaps 
you want to add some entry for @uref{update.quake3arena.com}, too.
If you have got a complete master server add entries for:
@example
master.quake3world.com
master.quake3arena.com
master3.idsoftware.com
@end example
The configuration of the server knows the following items.
@table @code
@item netport
This entry should contain @samp{udp} for @samp{proto} and some udp port.
The default port is 27952.

@item echo
The key servers echo reply when authorizing.

@item logfile
All keys the clients send will be logged within this file.
@end table

@node Gnutella Spider, Tunnel Server, Quake III Key Server, Existing Servers
@subsection Gnutella Spider

@subsubsection What is it ?
The Gnutella net is some kind of peer-to-peer network which is based on
client programs only. There are no servers. The network itself is formed
by client connections only. Generally the Gnutella network is for sharing
files of any kind.

This Gnutella spider is for seeking the needly in the haystack. Once 
connected to the network it regularly tries to find certain files in there.
It keeps track of all connected clients and tries to reconnect them if
the current connections are lost.

@subsubsection Configuration
The Gnutella spider knows the following configurations items.

@table @code
@item port
This entry should contain @samp{tcp} for @samp{proto} and some port and
network interface. The default port is 6346. If you want to see the host
catcher list of this Gnutella spider you can connect to this port with 
any WWW browser at @uref{http://localhost:6346/@code{net-url}}.

@item net-url
The above url is configurable via this item.

@item hosts
This is the initial host list of the clients the spider tries to 
connect to. Each list item should be of the format @code{ip:port} 
(e.g. @samp{146.145.85.34:6346}). If the port information is left
blank it defaults to 6346. If you need some entry point for 
the gnutella network have a look at @uref{http://www.gnutellahosts.com/} 
or @uref{http://www.gnutellanet.com/}.

@item search
This is the so called needle. Each search line is either a set of 
@key{SPC} delimited tokens where every token must match a search 
reply for downloading it or a kind of wildcard expression including 
@samp{?} and @samp{*}. Search lines are always matched case insensitive.

@item search-limit
This limits how many results the Gnutella spider returns to other people 
searching your files.

@item max-ttl
Every Gnutella packet has got a TTL. This is the maximum TTL allowed for
outgoing packets.

@item ttl
When creating a new Gnutella packet we use this as TTL.

@item download-path
This is where the spider saves needles in.

@item share-path
Here are all the files we share with others. The Gnutella spider will 
recurse into directories. Thus be careful with this option.

@item max-downloads
Maximum amount of concurrent downloads from the network.

@item max-uploads
Maximum amount of concurrent uploads to the network.

@item connection-speed
This is what we send as our connection speed in KBit/s. We also use this
value to throttle down the network transfer rate for file uploads.

@item min-speed
Search for needles on hosts with a minimum speed. Set it to 0 if you do
not care about. This value is in KBit/s, too.

@item file-extensions
If we get replies on search queries we check if the file extension of this
reply matches one of these extensions. Useful extensions are @samp{mp3} and
@samp{mpg}.

@item connections
This is the amount of concurrent connections the Gnutella spider tries
to keep up to the network. The IP addresses and the port information is
taken from the host catcher hash.

@item force-ip
You can force the Gnutella spider to send outgoing replies with this
IP as host information. Must be in dotted decimals notation. This is 
useful if you are behind a masquerading gateway. You need to install
some kind of port forwarder to let other people connect your host.

@item force-port
Force the Gnutella spider to send outgoing replies with this PORT as 
port information. See above for more information.
@end table

@node Tunnel Server, , Gnutella Spider, Existing Servers
@subsection Tunnel Server

@subsubsection General description
The Tunnel server is for mapping one port configuration to another. Thus
we should rather speak of a port forwarder. Two portwarder can form a
tunnel. Generally this means that you can setup @value{PACKAGE} to accept 
network connections in order to pass all network data traffic on this 
line to another address. This can be useful to workaround gateways and 
firewalls. When instantiating an ICMP source or destination you must
ensure root privileges for the application. One of the given examples
in @file{serveez.cfg} shows how you can setup a tunnel server for 
forwarding a pipe connection.

@subsubsection Configuration
This might be the most easiest configuration to setup. You essentially
need to define the source port configuration and the target port 
configuration. The @file{@value{s_PACKAGE}.cfg} in the @file{data/} 
directory shows two example configurations how to tunnel TCP 
connections over UDP and ICMP. The UDP tunnel accesses the standard 
HTTP port 80 and the ICMP tunnel accesses the standard Telnet port 23.

@table @code
@item source
The source port configuration.

@item target
The target port configuration.
@end table

@node Co-Server, Porting issues, Server, Top
@chapter Co-Server

@menu
* What are Co-Servers::         The use of Co-Servers in @value{PACKAGE}
* Writing Co-Servers::          How to write Co-Servers with @value{PACKAGE}
* Existing Co-Servers::         What kind of Co-Servers already exist ?
@end menu

@node What are Co-Servers, Writing Co-Servers, Co-Server, Co-Server
@section What are Co-Servers

If it is necessary to complete blocking tasks in @value{PACKAGE} you have 
to use Co-Servers. The actual implementation in Unices is a process and in
Win32 systems it is realized by a thread.

@node Writing Co-Servers, Existing Co-Servers, What are Co-Servers, Co-Server
@section Writing Co-Servers

@subsection Making and configuring preparations

First you have to change into the @file{src/coserver/} directory of the 
@value{PACKAGE} package. Then edit the @file{Makefile.am} and add your 
header and implementation file to the @code{libcoserver_a_SOURCES}
variable there.

@subsection Co-Server header file

You must define the Co-Server handle routine here. This callback
gets the input buffer argument and delivers the output buffer result.
Both of these buffers are supposed to be lines separated by a @samp{\n}.

@subsection Co-Server implementation file

Here you need to @code{#include "coserver.h"} and implement the 
Co-Server handle routine defined in the Co-Server header file. This 
could be any blocking system call. On successful completion you 
can return the result or NULL on errors. The input and output 
buffers are plain strings and can have any format with one exception. 
Because the Co-Servers communicate via a line protocol with 
@value{PACKAGE} these buffers must not contain @samp{\n} (0x0d).

@subsection Make your Co-Server available in @value{PACKAGE}

For this you have to edit @file{coserver.h} and @file{coserver.c} in the
@file{src/coserver/} directory. In the header file you have to define a 
further COSERVER_* id and set the MAX_COSERVER_TYPES define to the 
appropriate value. Then you should define a further coserver_* macro in the 
same file.

In @file{coserver.c} you have to implement the coserver_* macro. This macro
takes three arguments. The first is always specific to your Co-Server and is
used to create the actual request string. Then follows the result callback
routine, and an optional argument for this callback. The latter two are
simply passed to the @code{coserver_send_request} routine. This routine 
takes four arguments at all where the first is the previously defined 
COSERVER_* id and the second is the input buffer for the coserver handle 
routine without the trailing @samp{\n}.

Then you need to add your Co-Server to the @code{int_coserver_type} array
specifying the COSERVER_* id, the Co-Server description, the Co-Server
handle routine discussed above, the amount of Co-Server instances to be
created and an optional initialization routine.

@node Existing Co-Servers,  , Writing Co-Servers, Co-Server
@section Existing Co-Servers

@subsection Identification (Ident) Co-Server

The Identification Protocol is briefly documented in RFC1413. It
provides a means to determine the identity of a user of a particular 
TCP connection. Given a TCP port number pair, it returns a character 
string which identifies the owner of that connection on the server's system.

This is a connection based application on TCP. A server listens for
TCP connections on TCP port 113 (decimal). Once a connection is
established, the server reads a line of data which specifies the
connection of interest. If it exists, the system dependent user
identifier of the connection of interest is sent as the reply. The
server may then either shut the connection down or it may continue to
read/respond to multiple queries.

Actually the Ident Co-Server is a client to this kind of service. For
every established network connection you can use this service by calling
the appropriate macro from @file{coserver.h}. But you could also use the
Ident Co-Server as is without this macro. The format of the input buffer
is:

@example
Format:
RemoteAddressInDottedDecimals ":" RemotePort ":" LocalPort

Macro:
coserver_ident (sock, MyIdentCallback, sock->id, sock->version);
@end example

In this context @code{sock} is of type @code{socket_t} and 
@code{MyIdentCallback} is something like the following example. Both
of the last two (optional) arguments identify a valid socket structure
and @code{user} can be NULL if there is no ident daemon running on the 
foreign machine. The last two argument within the above macro will be the 
last two arguments in the below callback. Thus you will know what kind of 
data the invocation of the callback is related to.

@example
Callback:
int
MyIdentCallback (char *user, int id, int version)
@{
  printf ("Identified user: %s\n", user);
  return 0;
@}
@end example

@subsection Domain Name Server (DNS) Co-Server

The DNS Co-Server is using @code{gethostbyname()} to translate a given
hostname to the appropriate IP address. The format of the Co-Server input
line and the macro from @file{coserver.h} is shown below. The IRC server is
currently using this Co-Server for resolving its @samp{?-Lines}.
@xref{Existing Servers}, for more information. In the below example 
@code{realhost} is something like @samp{www.textsure.net}.

@example
Format:
RemoteHostname

Macro:
coserver_dns (realhost, irc_connect_server, ircserver, NULL);

Callback:
int
irc_connect_server (char *ip, irc_server_t *server)
@{
  printf ("The ip address is: %s\n", ip);
  return 0;
@}
@end example

@subsection Reverse Domain Name Server (reverse DNS) Co-Server

As easily guessed from the name this Co-Server is just doing the reverse
as the DNS Co-Server. It translates a given IP address into a hostname
using @code{gethostbyaddr()}. Within the macro the ip address is given
as an @code{unsigned long} in host byte order and the Reverse DNS 
Co-Server itself takes something like @samp{192.168.2.1}.

@example
Format:
RemoteAddressInDottedDecimals

Macro:
coserver_reverse (addr, MyReverseCallback, sock->id, sock->version);

Callback:
int
MyReverseCallback (char *host, int id, int version)
@{
  printf ("Hostname is: %s\n", host);
  return 0;
@}
@end example

@node Porting issues, Bibliography, Co-Server, Top
@chapter Porting issues

@value{PACKAGE} was always designed with an eye on maximum 
portability. Autoconf and Automake have done a great job at this. 
A lot of @code{#define}'s help to work around some of the different 
unices's oddities. Have a look at @file{config.h} for a complete list 
of all these conditionals.

The most doubtful might be the Win32 port. There are two different targets.
Where the @code{__MINGW32__} port refers to a native Win32 port. The home
of the team is @uref{http://www.mingw.org/}. The port to the
@code{__CYGWIN__} target always depends on the unix emulation layer DLL
@file{cygwin1.dll}. Both ports are more or less advanced at this time, but
for performance reasons it is always better to chose native Win32.

The are major differences between the Win32 and Unix implementations due
to the completely different API those systems provide.

@table @asis
@item Processes and Threads
Because process communication is usually done by a pair of unidirectional
pipes we chose that method in order to implement the Co-Servers in unices.
The Win32 implementation are threads which are still part of the main
process.

@item Sockets and Handles
In Win32 systems there is a difference in network sockets and file 
descriptors. Those we had to implement quite a complex main socket loop.

@item Named Pipes
Both systems Unix and Win32 do provide this functionality (Windows NT 4.0
and above). The main differences here are the completely different APIs.
On a usual unix you create a named pipe within the filesystem via 
@code{mkfifo()} and in Win32 you have to @code{CreateNamedPipe()} which
will create some special network device. A further difference is what you
can do with these pipes. On Win32 systems this @samp{network device} is
valid on remote machines. That is on Unices possible if the created 
filesystem node is located on a NFS. Named pipes on Unices are 
unidirectional, on Win32 these are bidirectional and instantiatable.

@item Winsock Versions
There are some difference between the original Winsock 1.1 API and the new
version 2.2.x. In a nutshell, WinSock 2 is WinSock 1.1 on steroids, it's 
a superset of 1.1's APIs and architecture. In addition to its new features, 
it also clarifies existing ambiguities in the 1.1 WinSock specification 
and adds new extensions that take advantage of operating system features 
and enhance application performance and efficiency. Finally, WinSock 2 
includes a number of new protocol-specific extensions. These extensions
--such as multicast socket options-- are relegated to a separate annex, 
since the main WinSock 2 protocol specification is protocol-independent. 

The Winsock DLL and import library for version 1.1 are @file{wsock32.dll}
and @file{wsock32.lib} and for version 2.2 it is @file{ws2_32.dll} and
@file{ws2_32.lib}. @value{PACKAGE} is currently using the 1.1 version
because there was no reason yet to switch to version 2.2.

The Winsock API is still a bit buggy. Connected datagram behaviors are 
not pertinent to any WinSock 2 features, but to generic WinSock. On Win95 
it's possible to use recvfrom()/WSARecvFrom() on a "connected" UDP socket, 
but on NT4 recvfrom()/WSARecvFrom fail with 10056 (WSAEISCONN). NOTE: 
sendto()/WSASendTo() fail with WSAEISCONN on both (which I don't see 
any reason for, but anyway...).

@item Raw sockets on Windows systems
Raw sockets require Winsock 2. To use them under Windows NT/2000, you must 
be logged in as an Administrator. On any other Microsoft's we are using 
the ICMP.DLL (an idiotic and almost useless API that some guys insist on 
using in their applications). This DLL is an undocumented API for sending 
ICMP echo packets, also called "pings". This API works fine and is present 
on all current Windows boxes with Microsoft Winsocks, but Microsoft says 
they'll replace it as soon as something better comes along. (Microsoft's 
been saying this since the Windows 95 days, however, yet this functionality 
still exists in Windows 2000.)

@item Miscellaneous
To use the vanilla Win32 winsock, you just need to #define Win32_Winsock 
and #include "windows.h" at the top of your source file(s). You'll also
want to add -lwsock32 to the compiler's command line so you link against 
libwsock32.a. 

How do I make the console window go away ?
The default during compilation is to produce a console application. If you 
are writing a GUI program, you should either compile with -mwindows as
explained above, or add the string "-Wl,--subsystem,windows" to the GCC 
command line. 

What preprocessor do I need to know about ?
We use _WIN32 to signify access to the Win32 API and __CYGWIN__ for access 
to the Cygwin environment provided by the dll. 
We chose _WIN32 because this is what Microsoft defines in VC++ and we 
thought it would be a good idea for compatibility with VC++ code to
follow their example. We use _MFC_VER to indicate code that should be 
compiled with VC++. 

Why we do not use pipes for Co-Servers ?
Windows differentiates between sockets and file descriptors, that's why 
you can not select() file descriptors. Please close() the pipe's 
descriptors via CloseHandle() and not closesocket(), because this will fail.

The C run-time libraries have a preset limit for the number of files that
can be open at any one time. The limit for applications that link with the
single-thread static library (LIBC.LIB) is 64 file handles or 20 file
streams. Applications that link with either the static or dynamic
multithread library (LIBCMT.LIB or MSVCRT.LIB and MSVCRT.DLL), have a limit
of 256 file handles or 40 file streams. Attempting to open more than the
maximum number of file handles or file streams causes program failure.

I know MinGW uses the msvcrt.dll and hence should have the above limitation
but what about cygwin which uses glibc ? Just curious ... i dont think there
is any operating system limitation may be some TLS issue from Microsoft or
some other stuff like that...

As far as I know, one of the big limitations of winsock is that
the SOCKET type is *not* equivalent to file descriptor unlike that
using BSD or POSIX sockets. That's one of the major reasons for using
a separate data type, SOCKET, as opposed to int, typical type of a
file descriptor. This implies that you cannot mix SOCKETs and stdio,
sorry. This is the case when you use -mno-cygwin.

Actually they are regular file handles, just like any other. There is a 
bug in all 9x/kernel32 libc/msv/crtdll interface implementations 
GetFileType() returns TYPE_UNKNOWN for handles to sockets. Since this 
is AFAIK the only unknown type there is, you know you have a socket handle.
There is a fix in the more recent perl distrib's that you can use as a 
general solution. -loldnames -lperlcrt -lmsvcrt will get you TYPE_CHAR
for socket handles. That are put into an fd with _open_osfhandle()
also fixes several other nasty bugs in the MS libcXXX.
@end table

If if you want to compile @value{PACKAGE} with the native 
M$ Visual C++ compiler you have to go quite a long way. But it is 
possible anyway. We assume you got a Cygwin development environment 
somewhere, the Developer Studio installation and @samp{@value{s_PACKAGE}} 
and @samp{@value{s_SIZZLE}} in separate directories.

@table @code
@item Step 1. Create development environment for VC.
In order to create both of the @file{config.h} files we need to execute
the @file{configure} script.
@example
$ c:\Programme\DevStudio\VC\bin\VCVARS32.BAT
$ set PATH=%PATH%;c:\Programme\cygwin\bin
$ set CC=cl -D__MINGW32__ -D_WIN32
$ set LD=link
@end example

@item Step 2. Configure.
@example
$ sh configure --with-@value{s_SIZZLE}=../@value{s_SIZZLE}/
@end example

@item Step 3. Create project and workspace for both @value{PACKAGE} and @value{SIZZLE}.
Start your Developer Studio and create a new project. For 
@value{PACKAGE} you need to create a @samp{Win32 Console Application} 
and for @value{SIZZLE} a @samp{Win32 Dynamic-Link Library} then. For both 
projects you need to add all the @file{.c} files form @file{src/} 
(@value{PACKAGE}) and @file{lib@value{s_SIZZLE}/} (@value{SIZZLE}).

@item Step 4. Define options.
For configuring your projects you press @key{Alt-F7}. Make the following
definitions:

@table @code
@item Preprocessor.
@code{_WIN32,__MINGW32__,__STDC__=0,HAVE_CONFIG_H,__@value{b_SIZZLE}_EXPORT__=1} 
for @value{SIZZLE} and
@code{_WIN32,__MINGW32__,__STDC__=0,HAVE_CONFIG_H,__@value{b_SIZZLE}_IMPORT__=1} 
for @value{PACKAGE}.

@item Include directories.
Add the following paths: @file{.,..,../@value{s_SIZZLE},./src,../..}.

@item Object-Modules.
Simply add @file{wsock32.lib} and @file{@value{s_SIZZLE}.lib} 
(for @value{PACKAGE} only).

@item Library paths.
In order to link against the previously created @value{SIZZLE} library 
you have to specify the additional library path 
@file{../@value{s_SIZZLE}/lib@value{s_SIZZLE}} in the @value{PACKAGE} 
project.
@end table
@end table

Compiling now via @key{F7} you got a completely native Win32 application
which is linked against the @file{kernel32.dll} and @file{wsock32.dll}.

Now follows the list on which operating systems and architectures
@value{PACKAGE} has been build and tested successfully.

@itemize @bullet

@item FreeBSD 3.3 on Intel
@item FreeBSD 4.0 on Intel
@item FreeBSD 4.0 on Alpha
@item Linux 2.x.x on Intel
@item Linux 2.x.x on Alpha
@item Linux 2.4.0-xxx on i64 (Itanium prototype)
@item Solaris 2.6, 2.7 on Sparc 32, Sparc 64
@item SunOS 5.6 on Intel
@item AIX 4.3 on RS6000
@item Windows 95 on Intel
@item Windows 98 on Intel
@item Windows Millenium Edition on Intel
@item Windows NT 4.0 on Intel
@item Windows 2000 on Intel
@item IRIX 6.x on MIPS
@item Tru64/OSF1 UNIX V4.0 (former Digital UNIX) on Alpha
@item Tru64/OSF1 UNIX V5.0 (former Digital UNIX) on Alpha

@end itemize

@node Bibliography, License, Porting issues, Top
@chapter Bibliography

This section contain some of the documents and resources we read and used
to implement various parts of this package. They appear in no specific
order.

@enumerate
@item RFC 760
The Internet Protocol
@item RFC 1071
Computing the Internet Checksum
@item RFC 1413
Identification Protocol
@item RFC 1459
Internet Relay Chat Protocol
@item RFC 1945
Hypertext Transfer Protocol -- HTTP/1.0
@item RFC 2068
Hypertext Transfer Protocol -- HTTP/1.1
@item RFC 2616
Hypertext Transfer Protocol -- HTTP/1.1
@item RFC 768
User Datagram Protocol
@item RFC 791
Internet Protocol
@item RFC 777
Internet Control Message Protocol
@item @uref{http://gnutelladev.wego.com/}
The Gnutella Protocol
@item @uref{http://www.efnet.org/}
The official EFNet site
@item @uref{http://www.gamers.org/dEngine/quake/}
Quake Developer's Page
@item @uref{http://www.sockets.com/}
Winsock Development Information
@item @uref{http://www.cyberport.com/~tangent/programming/winsock/}
Winsock Programmer's FAQ
@end enumerate

@node License, , Bibliography, Top
@chapter License

@section GNU General Public License Version 2, June 1991

Copyright (C) 1989, 1991 Free Software Foundation, Inc.
59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.
Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.

@section Preamble

The licenses for most software are designed to take away your
freedom to share and change it. By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users. This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it. (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.) You can apply it to
your programs, too.

When we speak of free software, we are referring to freedom, not
price. Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.

To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have. You must make sure that they, too, receive or can get the
source code. And you must show them these terms so they know their
rights.

We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software. If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

Finally, any free program is threatened constantly by software
patents. We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary. To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

The precise terms and conditions for copying, distribution and
modification follow.

@section Terms and conditions for copying, distribution and modification

@enumerate 0
@item
This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License. The "Program", below,
refers to any such program or work, and a "work based on the Program"
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language. (Hereinafter, translation is included without limitation in
the term "modification".) Each licensee is addressed as "you".

Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope. The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.

@item
You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.

You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.

@item
You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

@enumerate a
@item
You must cause the modified files to carry prominent notices
stating that you changed the files and the date of any change.

@item
You must cause any work that you distribute or publish, that in
whole or in part contains or is derived from the Program or any
part thereof, to be licensed as a whole at no charge to all third
parties under the terms of this License.

@item
If the modified program normally reads commands interactively
when run, you must cause it, when started running for such
interactive use in the most ordinary way, to print or display an
announcement including an appropriate copyright notice and a
notice that there is no warranty (or else, saying that you provide
a warranty) and that users may redistribute the program under
these conditions, and telling the user how to view a copy of this
License.  (Exception: if the Program itself is interactive but
does not normally print such an announcement, your work based on
the Program is not required to print an announcement.)
@end enumerate

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.

In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

@item
You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:

@enumerate a
@item
Accompany it with the complete corresponding machine-readable
source code, which must be distributed under the terms of Sections
1 and 2 above on a medium customarily used for software interchange; or,

@item
Accompany it with a written offer, valid for at least three
years, to give any third party, for a charge no more than your
cost of physically performing source distribution, a complete
machine-readable copy of the corresponding source code, to be
distributed under the terms of Sections 1 and 2 above on a medium
customarily used for software interchange; or,

@item
Accompany it with the information you received as to the offer
to distribute corresponding source code.  (This alternative is
allowed only for noncommercial distribution and only if you
received the program in object code or executable form with such
an offer, in accord with Subsection b above.)
@end enumerate

The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.

If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.

@item
You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.

@item
You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.

@item
Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.

@item
If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.

If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

@item
If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.

@item
The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation.

@item
If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.
@end enumerate

@section No warranty

@enumerate 11
@item
BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

@item
IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.
@end enumerate

@contents
@bye
