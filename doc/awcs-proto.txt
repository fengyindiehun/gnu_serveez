
Specification of the slave/master server protocol of aWCS.
**********************************************************


Master server
=============

The first client that connects and sends an aWCS initialize message
(see below)  becomes the master server.

When the master server disconnects, all clients get kicked.


Other clients
=============

All other clients have to send the aWCS client initialize message,
which is the string "aWCS\0" (note the final NUL character, which is
part of the message).  Messages received from those clients are simply
sent to the master server with the client number of the sender
prefixed (see below `Messages from clients').


Message format
==============

A request consists of a sequence of characters terminated with the
NUL character '\0'.


Messages from clients
=====================

All messages from clients are routed to the master server, but
modified in such a way that 4 digits and one space precede the
original message. These 4 digits are the (decimal) client's id
right-padded with zeroes.


Messages from the master server
===============================

Messages that come from the master server must have the following
format:

The first character is one of the following and has a special meaning:

character | meaning
----------+-------------------------------------
0         | Send message to all clients.
1         | Send message to the clients denoted in the message.
2         | Report status to the master server.
3         | Kick the clients denoted in the message.
4	  | Turn off flood protection for the clients in the message.
5	  | Turn on flood protection for the clients in the message.
6	  | Initialization message.

Those special characters are followed by a single space.

Messages which require additional parameters (multicast for example)
carry these parameters after the space in a comma seperated list of
client ids in the above format.  The client id list is terminated
by the \0 character terminating the request (if no parameters follow)
or by a single space (if parameters follow).  Note that in comma
separated lists, no spaces are allowed.

Example:

0 Hallo Welt\0  
  - Send "Hallo Welt\0" to all clients except the master server.

1 0001,0004,0006 Gruezi!\0
  - Send "Gruezi\0" to the clients 1, 4 and 6.

2 \0
  - Send status data back to the master server.

3 0003,0004\0
  - Kicks clients 3 and 4.

4 0004,0016\0
  - Turn off flood protection for clients 4 and 16.

5 0001,005\0
  - Turn on flood protection for clients 1 and 5.

6 \0
  - Initialize data structures and accept the connection as the 
    master server.


Status messages for the master server
=====================================

The low level server posts messages to the master server on several
occasions, for example when clients connect, disconnect etc.

Status messages have the same format as other client messages for the
master server.  The client number in the message is 0000, followed by a
space, the status message type and additional parameters.

Type | Description                | Parameter
-----+----------------------------+-----------------------
 0   | Client has connected.      | Client id, client IP number:port
 1   | Client has disconnected.   | Client id, error code
 2   | Client got kicked.         | Client id, kick reason
 3   | Low level server is alive. | 42
 4   | Notify time elapsed.       | 42

Error code  | Description
------------+----------------------
 0          | Success
 1          | Client closed connection

Kick reason | Description
------------+---------------------
 0          | Flooding
 1          | Output buffer overflow


Happy hacking,
      mgrabmue

