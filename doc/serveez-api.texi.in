\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename serveez-api.info
@settitle Serveez Embedding Manual and API Documentation
@c %** end of header

@exampleindent 2
@c @include version.texi

@set PACKAGE Serveez
@set s_PACKAGE serveez

@dircategory Serveez - A server framework.
@direntry
* Serveez-API: (serveez-api).   Serveez Embedding Manual.
@end direntry

@titlepage
@title Serveez, version @value{VERSION}
@subtitle A server framework
@subtitle Edition @value{EDITION},  @value{UPDATED}
@author Stefan Jahn
@author Raimund Jacob

@page
@vskip 0pt plus 1filll

Copyright @copyright{} 2000 Stefan Jahn <stefan@@lkcc.org>@*
Copyright @copyright{} 2000 Raimund Jacob <raimi@@lkcc.org>@*

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1
or any later version published by the Free Software Foundation.
A copy of the license is included in the section entitled "GNU
Free Documentation License".

@end titlepage

@node Top, Introduction, (dir), (dir)

@ifinfo
This file documents how to embed Serveez into C programs and describes
all parts of the API it provides.
@end ifinfo

@menu
* Introduction::          About this manual 
* Embedding Serveez::     How to embed Serveez into C programs
* Embedding API::         Description of functions and data in the library
* Index::                 Overall index
@end menu

@node Introduction, Embedding Serveez, Top, Top
@chapter Introduction

@node Embedding Serveez, Embedding API, Introduction, Top
@chapter Embedding Serveez

@node Embedding API, Index, Embedding Serveez, Top
@chapter Embedding API

@menu
* Memory management::     Memory management functions
* Data structures::       Data structure helpers
* Utility functions::     Miscellaneous helper functions
* Core functions::        Network core implementations
* Client connections::    Client connection functions
* Socket::                Socket management functions
* Coserver::              Coserver interface
* Server::                Server object functions
* ServerCore::            Server core implementation
* ServerLoop::            Server loop implementation
* ServerSocket::          Server sockets for TCP, UDP, ICMP and pipes
* Booting::               Configuration and boot functions
* Interface::             Network interface function implementation
* Dynamic server::        Dynamic server loading implementation
* Windoze::               Windows port implementations
@end menu

@node Memory management, Data structures, , Embedding API
@section Memory management

SVZ_ALLOCATED_BYTES_DEFVAR
SVZ_ALLOCATED_BLOCKS_DEFVAR
SVZ_MALLOC_FUNC_DEFVAR
SVZ_REALLOC_FUNC_DEFVAR
SVZ_FREE_FUNC_DEFVAR

SVZ_MALLOC_DEFUN
SVZ_CALLOC_DEFUN
SVZ_REALLOC_DEFUN
SVZ_FREE_DEFUN
SVZ_STRDUP_DEFUN
SVZ_PMALLOC_DEFUN
SVZ_PREALLOC_DEFUN
SVZ_PSTRDUP_DEFUN
SVZ_HEAP_DEFUN

@node Data structures, Utility functions, Memory management, Embedding API
@section Data structures

@menu
* Array::                 Array implementation
* Hashtable::             Hashtable implementation
* Sparsevector::          Sparsevector implementation
* Vectorlist::            Vectorlist implementation
@end menu

@node Array, Hashtable, , Data structures
@subsection Array functions

The array data structure is a simple array implementation. Each array has got
a size and capacity. The array indices range from zero to the array's size 
minus one.

SVZ_ARRAY_CREATE_DEFUN
SVZ_ARRAY_CLEAR_DEFUN
SVZ_ARRAY_DESTROY_DEFUN
SVZ_ARRAY_GET_DEFUN
SVZ_ARRAY_ADD_DEFUN
SVZ_ARRAY_DEL_DEFUN
SVZ_ARRAY_CAPACITY_DEFUN
SVZ_ARRAY_SIZE_DEFUN
SVZ_ARRAY_CONTAINS_DEFUN
SVZ_ARRAY_IDX_DEFUN
SVZ_ARRAY_INS_DEFUN
SVZ_ARRAY_FOREACH_DEFMAC

@node Hashtable, Sparsevector, Array, Data structures
@subsection Hashtable functions

A hashtable associates keys of arbitrary size and content with values. You
cannot store two values associated with the same key. The values can have
any simple C types like integers and pointers.

SVZ_HASH_CREATE_DEFUN
SVZ_HASH_DESTROY_DEFUN
SVZ_HASH_CLEAR_DEFUN
SVZ_HASH_DELETE_DEFUN
SVZ_HASH_PUT_DEFUN
SVZ_HASH_GET_DEFUN
SVZ_HASH_VALUES_DEFUN
SVZ_HASH_KEYS_DEFUN
SVZ_HASH_SIZE_DEFUN
SVZ_HASH_CAPACITY_DEFUN
SVZ_HASH_CONTAINS_DEFUN
SVZ_HASH_FOREACH_KEY_DEFMAC
SVZ_HASH_FOREACH_VALUE_DEFMAC

@node Sparsevector, Vectorlist, Hashtable, Data structures
@subsection Sparsevector functions

A sparse vector is a kind of data array which grows and shrinks on demand. 
It unifies the advantages of chained lists (less memory usage than simple 
arrays) and arrays (faster access to specific elements). This implementation 
can handle gaps in between the array elements.

SVZ_SPVEC_CREATE_DEFUN
SVZ_SPVEC_DESTROY_DEFUN
SVZ_SPVEC_ADD_DEFUN
SVZ_SPVEC_CLEAR_DEFUN
SVZ_SPVEC_CONTAINS_DEFUN
SVZ_SPVEC_GET_DEFUN
SVZ_SPVEC_INDEX_DEFUN
SVZ_SPVEC_DELETE_DEFUN
SVZ_SPVEC_DELETE_RANGE_DEFUN
SVZ_SPVEC_SET_DEFUN
SVZ_SPVEC_UNSET_DEFUN
SVZ_SPVEC_SIZE_DEFUN
SVZ_SPVEC_LENGTH_DEFUN
SVZ_SPVEC_INSERT_DEFUN
SVZ_SPVEC_VALUES_DEFUN
SVZ_SPVEC_PACK_DEFUN

@node Vectorlist, , Sparsevector, Data structures
@subsection Vectorlist functions

A vector list is an array of memory chunks with a fixed size. It
holds copies of the values you added to the vector list. When deleting
or inserting an element the indices of the following elements get
either decremented or incremented. This data structure is especially useful
if you actually want to forget about the pointers you put into it for it
saves copies and not the pointers itself.

SVZ_VECTOR_CREATE_DEFUN
SVZ_VECTOR_DESTROY_DEFUN
SVZ_VECTOR_CLEAR_DEFUN
SVZ_VECTOR_ADD_DEFUN
SVZ_VECTOR_GET_DEFUN
SVZ_VECTOR_SET_DEFUN
SVZ_VECTOR_DEL_DEFUN
SVZ_VECTOR_INS_DEFUN
SVZ_VECTOR_IDX_DEFUN
SVZ_VECTOR_CONTAINS_DEFUN
SVZ_VECTOR_LENGTH_DEFUN

@node Utility functions, Core functions, Data structures, Embedding API
@section Utility functions

SVZ_VERBOSITY_DEFVAR
SVZ_OS_VERSION_DEFVAR
SVZ_ERRNO_DEFVAR

LOG_PRINTF_DEFUN
LOG_SET_FILE_DEFUN
SVZ_HEXDUMP_DEFUN
SVZ_ITOA_DEFUN
SVZ_ATOI_DEFUN
SVZ_STRCASECMP_DEFUN
SVZ_STRNCASECMP_DEFUN
SVZ_OPENFILES_DEFUN
SVZ_TIME_DEFUN
SVZ_UPTIME_DEFUN
SVZ_TOLOWER_DEFUN
SVZ_SYS_VERSION_DEFUN
SVZ_HSTRERROR_DEFUN
SVZ_SYSERROR_DEFUN
SVZ_SNPRINTF_DEFUN

@node Core functions, Client connections, Utility functions, Embedding API
@section Network core functions

SVZ_INET_NTOA_DEFUN
SVZ_INET_ATON_DEFUN
SVZ_SOCKET_CONNECT_DEFUN
SVZ_SOCKET_CREATE_DEFUN
SVZ_FD_CLOEXEC_DEFUN
SVZ_FD_NONBLOCK_DEFUN
SVZ_TCP_CORK_DEFUN
SVZ_SENDFILE_DEFUN
SVZ_OPEN_DEFUN
SVZ_CLOSE_DEFUN
SVZ_FSTAT_DEFUN
SVZ_FOPEN_DEFUN
SVZ_FCLOSE_DEFUN

@node Client connections, Socket, Core functions, Embedding API
@section Client connections

@menu
* TCP sockets::           TCP socket functions
* Pipe connections::      Named and anonymous pipe functions
* UDP sockets::           UDP socket functions
* ICMP sockets::          ICMP socket functions
* Raw sockets::           Raw socket functions
@end menu

@node TCP sockets, Pipe connections, , Client connections
@subsection TCP sockets

TCP_CONNECT_DEFUN
TCP_DEFAULT_CONNECT_DEFUN
TCP_READ_SOCKET_DEFUN
TCP_WRITE_SOCKET_DEFUN

@node Pipe connections, UDP sockets, TCP sockets, Client connections
@subsection Pipe connections

PIPE_VALID_DEFUN
PIPE_READ_SOCKET_DEFUN
PIPE_WRITE_SOCKET_DEFUN
PIPE_DISCONNECT_DEFUN
PIPE_CREATE_DEFUN
PIPE_CREATE_PAIR_DEFUN
PIPE_CONNECT_DEFUN
PIPE_LISTENER_DEFUN

@node UDP sockets, ICMP sockets, Pipe connections, Client connections
@subsection UDP sockets

UDP_READ_SOCKET_DEFUN
UDP_WRITE_SOCKET_DEFUN
UDP_CHECK_REQUEST_DEFUN
UDP_CONNECT_DEFUN
UDP_WRITE_DEFUN
UDP_PRINTF_DEFUN

@node ICMP sockets, Raw sockets, UDP sockets, Client connections
@subsection ICMP sockets

ICMP_STARTUP_DEFUN
ICMP_CLEANUP_DEFUN
ICMP_READ_SOCKET_DEFUN
ICMP_WRITE_SOCKET_DEFUN
ICMP_CHECK_REQUEST_DEFUN
ICMP_CONNECT_DEFUN
ICMP_SEND_CONTROL_DEFUN
ICMP_WRITE_DEFUN
ICMP_PRINTF_DEFUN

@node Raw sockets, , ICMP sockets, Client connections
@subsection Raw sockets

RAW_GET_IP_HEADER_DEFUN
RAW_PUT_IP_HEADER_DEFUN
RAW_IP_CHECKSUM_DEFUN
RAW_CHECK_IP_HEADER_DEFUN

@node Socket, Coserver, Client connections, Embedding API
@section Socket management

SOCK_CONNECTIONS_DEFVAR

SOCK_VALID_DEFUN
SOCK_ALLOC_DEFUN
SOCK_FREE_DEFUN
SOCK_CREATE_DEFUN
SOCK_DISCONNECT_DEFUN
SOCK_WRITE_DEFUN
SOCK_PRINTF_DEFUN
SOCK_RESIZE_BUFFERS_DEFUN
SOCK_INTERN_CONNECTION_INFO_DEFUN
SOCK_ERROR_INFO_DEFUN
SOCK_UNIQUE_ID_DEFUN
SOCK_DETECT_PROTO_DEFUN
SOCK_CHECK_REQUEST_DEFUN
SOCK_IDLE_PROTECT_DEFUN
SOCK_FLOOD_PROTECT_DEFUN

@node Coserver, Server, Socket, Embedding API
@section Coserver functions

SVZ_COSERVERTYPES_DEFVAR
SVZ_COSERVERS_DEFVAR

SVZ_COSERVER_CHECK_DEFUN
SVZ_COSERVER_INIT_DEFUN
SVZ_COSERVER_FINALIZE_DEFUN
SVZ_COSERVER_DESTROY_DEFUN
SVZ_COSERVER_CREATE_DEFUN
SVZ_COSERVER_SEND_REQUEST_DEFUN

SVZ_COSERVER_RDNS_INVOKE_DEFUN
SVZ_COSERVER_RDNS_DEFMAC
SVZ_COSERVER_DNS_INVOKE_DEFUN
SVZ_COSERVER_DNS_DEFMAC
SVZ_COSERVER_IDENT_INVOKE_DEFUN
SVZ_COSERVER_IDENT_DEFMAC

@node Server, ServerCore, Coserver, Embedding API
@section Server functions

SVZ_SERVERTYPES_DEFVAR
SVZ_SERVERTYPE_ADD_DEFUN
SVZ_SERVERTYPE_DEL_DEFUN
SVZ_SERVERTYPE_FIND_DEFUN
SVZ_SERVERTYPE_FINALIZE_DEFUN
SVZ_SERVERTYPE_PRINT_DEFUN

SVZ_SERVERS_DEFVAR
SVZ_SERVER_FIND_DEFUN
SVZ_SERVER_ADD_DEFUN
SVZ_SERVER_DEL_DEFUN
SVZ_SERVER_NOTIFIERS_DEFUN
SVZ_SERVER_INIT_ALL_DEFUN
SVZ_SERVER_FINALIZE_ALL_DEFUN

SERVER_PORTCFG_EQUAL_DEFUN
SERVER_START_DEFUN
SERVER_BIND_DEFUN

@node ServerCore, ServerLoop, Server, Embedding API
@section Server core

SERVER_NUKE_HAPPENED_DEFVAR
SERVER_CHILD_DIED_DEFVAR
SERVER_NOTIFY_DEFVAR
SOCK_ROOT_DEFVAR
SOCK_LAST_DEFVAR

SOCK_FIND_DEFUN
SOCK_SCHEDULE_FOR_SHUTDOWN_DEFUN
SOCK_ENQUEUE_DEFUN
SOCK_DEQUEUE_DEFUN
SOCK_SHUTDOWN_ALL_DEFUN
SERVER_CHECK_BOGUS_DEFUN
SERVER_PERIODIC_TASKS_DEFUN
SERVER_LOOP_DEFUN
SERVER_LOOP_ONE_DEFUN
SERVER_SIGNAL_UP_DEFUN
SERVER_SIGNAL_DN_DEFUN
SERVER_SIGNAL_HANDLER_DEFUN

@node ServerLoop, ServerSocket, ServerCore, Embedding API
@section Server loop

SERVER_CHECK_SOCKETS_DEFUN

@node ServerSocket, Booting, ServerLoop, Embedding API
@section Server sockets

SERVER_CREATE_DEFUN
SERVER_ACCEPT_SOCKET_DEFUN
SERVER_ACCEPT_PIPE_DEFUN

@node Booting, Interface, ServerSocket, Embedding API
@section Boot functions

SVZ_CONFIG_DEFVAR
SVZ_LIBRARY_DEFVAR
SVZ_VERSION_DEFVAR
SVZ_BUILD_DEFVAR
HAVE_DEBUG_DEFVAR
HAVE_WIN32_DEFVAR

SVZ_NET_STARTUP_DEFUN
SVZ_NET_CLEANUP_DEFUN
SVZ_INIT_CONFIG_DEFUN
SVZ_BOOT_DEFUN
SVZ_HALT_DEFUN

@node Interface, Dynamic server, Booting, Embedding API
@section Network interface functions

SVZ_INTERFACES_DEFVAR

SVZ_INTERFACE_LIST_DEFUN
SVZ_INTERFACE_COLLECT_DEFUN
SVZ_INTERFACE_FREE_DEFUN
SVZ_INTERFACE_ADD_DEFUN

@node Dynamic server, Windoze, Interface, Embedding API
@section Dynamic server loading

SVZ_DYNLOAD_INIT_DEFUN
SVZ_DYNLOAD_FINALIZE_DEFUN
SVZ_SERVER_LOAD_DEFUN
SVZ_SERVER_UNLOAD_DEFUN

@node Windoze, , Dynamic server, Embedding API
@section Useful Windows functions

WINDOZE_START_DAEMON_DEFUN
WINDOZE_STOP_DAEMON_DEFUN
WINDOZE_ASC2UNI_DEFUN
WINDOZE_UNI2ASC_DEFUN
WINDOZE_GET_REG_UNSIGNED_DEFUN
WINDOZE_SET_REG_UNSIGNED_DEFUN
WINDOZE_GET_REG_STRING_DEFUN
WINDOZE_SET_REG_STRING_DEFUN

@node Index,  , Embedding API, Top
@chapter Index
     
@printindex fn

@contents
@bye
