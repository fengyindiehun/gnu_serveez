@c -*-texinfo-*-
@c
@c This file includes the documentation about the Guile servers.  It is
@c included by `serveez.texi'.
@c

This section describes the Guile interface of Serveez meant to provide
the ability to exceptionally write servers with Guile.  Of course you could
do this without any help of Serveez, but it makes it a lot easier.  The
Guile interface of Serveez reduces the Guile implementation of an Internet
server to a simple data processor.

@subsubsection Special data types

Serveez extends Guile by various new data types which represent internal
data structures of Serveez's core API.

@itemize @bullet
@item @code{#<svz-servertype>}
represents a server type.
@item @code{#<svz-server>}
represents a server (an instance of a server type).
@item @code{#<svz-socket>}
represents a socket structure.
@end itemize

@subsubsection Passing binary data

The new binary data type (i.e. @code{#<svz-binary>}) provides access to any
kind of unstructured data.  It manages data exchange between Guile and Serveez
and the other way around.  There are some converter functions for strings 
and lists which help to process this binary data in a more complex (guile'ish) 
way.

BINARY->STRING_DEFUN
STRING->BINARY_DEFUN
BINARY?_DEFUN
LIST->BINARY_DEFUN
BINARY->LIST_DEFUN
BINARY-SEARCH_DEFUN
BINARY-SET!_DEFUN
BINARY-REF_DEFUN
BINARY-LENGTH_DEFUN
BINARY-CONCAT!_DEFUN
BINARY-SUBSET_DEFUN

@subsubsection Server definition

In order to setup a new server type you use the procedure 
@code{(define-servertype!)}.  This procedure takes one argument which must be
a associative list specifying the server type in detail.  There are 
optional and mandatory elements you can setup in this alist.  The following
example shows the overall syntax of this procedure:

@lisp
(define-servertype! '(

  ;; Mandatory: server type prefix for later use in (define-server!)
  (prefix          . "foo")

  ;; Mandatory: server type description
  (description     . "guile foo server")

  ;; Mandatory for TCP and PIPE servers: protocol detection
  (detect-proto    . foo-detect-proto)

  ;; Optional: global server type initialization
  (global-init     . foo-global-init)

  ;; Optional: server instance initialization
  (init            . foo-init)

  ;; Optional: server instance finalization
  (finalize        . foo-finalize)

  ;; Optional: global server type finalization
  (global-finalize . foo-global-finalize)

  ;; Mandatory for TCP and PIPE servers: socket connnection
  (connect-socket  . foo-connect-socket)

  ;; Optional: server instance info
  (info-server     . foo-info-server)

  ;; Mandatory: server type configuration
  (configuration   . (

    ;; The server configuration is an alist (associative list) again.  Each
    ;; item consist of an item name and a list describing the item itself.
    ;; Syntax: (key . (type defaultable default))
    (foo-integer       . (integer  #t 0))
    (foo-integer-array . (intarray #t (1 2 3 4 5)))
    (foo-string        . (string   #t "default-foo-string"))
    (foo-string-array  . (strarray #t ("guile" "foo" "server")))
    (foo-hash          . (hash     #t (("foo" . "bar"))))
    (foo-port          . (portcfg  #t foo-port))
    (foo-boolean       . (boolean  #t #t))
  ))))
@end lisp

DEFINE-SERVERTYPE!_DEFUN

@subsubsection Predefined procedures

The following subset of procedures can be used to implement a Guile server.
They should be used within the callbacks defined in the 
@code{(define-servertype!)} procedure.  Each of these callbacks gets passed
the appropriate arguments needed to stuff into the below procedures.  Please
have a look at the example Guile servers for the very details.

SVZ:SOCK?_DEFUN
SVZ:SOCK:CHECK-REQUEST_DEFUN
SVZ:SOCK:HANDLE-REQUEST_DEFUN
SVZ:SOCK:BOUNDARY_DEFUN
SVZ:SOCK:FLOODPROTECT_DEFUN
SVZ:SOCK:PRINT_DEFUN
SVZ:SOCK:FINAL-PRINT_DEFUN
SVZ:SOCK:NO-DELAY_DEFUN
SVZ:SOCK:RECEIVE-BUFFER_DEFUN
SVZ:SOCK:RECEIVE-BUFFER-REDUCE_DEFUN
SVZ:SOCK:CONNECT_DEFUN
SVZ:SOCK:DISCONNECTED_DEFUN
SVZ:SOCK:DATA_DEFUN
SVZ:SOCK:PARENT_DEFUN
SVZ:SOCK:REFERRER_DEFUN
SVZ:SOCK:SERVER_DEFUN
SVZ:SOCK:LOCAL-ADDRESS_DEFUN
SVZ:SOCK:REMOTE-ADDRESS_DEFUN

SVZ:HTONS_DEFUN
SVZ:NTOHS_DEFUN
SVZ:HTONL_DEFUN
SVZ:NTOHL_DEFUN
SVZ:INET-ATON_DEFUN
SVZ:INET-NTOA_DEFUN

SVZ:SERVER?_DEFUN
SVZ:SERVER:CONFIG-REF_DEFUN
SVZ:SERVER:STATE-SET!_DEFUN
SVZ:SERVER:STATE-REF_DEFUN
SVZ:SERVER:STATE->HASH_DEFUN

SERVEEZ-EXCEPTIONS_DEFUN
SERVEEZ-NUKE_DEFUN

@subsubsection Callback prototypes

The Guile interface of Serveez is completely callback driven.  Each of the
procedures specified within the associative list passed to 
@code{(define-servertype!)} and the callbacks setup with one of the 
predefined procedures in the above section gets certain arguments passed and
is meant to return specific values to indicate success or failure.  This 
section describes each of of these callbacks.

@table @code
@item (global-init #<svz-servertype>)
This callback is executed once for every type of server right after the
@code{(define-servertype!)} statement.  Here you can initialize data or 
whatever is shared between all instances of your server type.  The callback 
is optional and can be set within @code{(define-servertype!)}.  It should
return zero to indicate success and non-zero to indicate failure.  If the
global initializer fails Serveez refuses to register the server type.

@item (global-finalize #<svz-servertype>)
If you want to free shared resources which were possibly allocated within
the global initializer you can do so here.  The callback is run when Serveez
shuts down (issued by @code{(serveez-nuke)}) or the server type gets 
unregistered for some reason.  It is meant to return zero to signal success.
The callback can be setup in @code{(define-servertype!)} and is optional.

@item (init #<svz-server>)
Within this routine you can initialize everything you might need for a single
instance of your server.  The callback is executed for each server instance
which has been created by @code{(define-server!)} and should return zero to
indicate success, otherwise Serveez rejects the server instance.  The callback
can be setup in @code{(define-servertype!)} and is optional.

@item (finalize #<svz-server>)
The server instance finalizer gets its instance representation as argument
passed.  You need to free all resources used by this server instance which
might have been allocated within the server instance initializer or consumed
during runtime.  You can set this callback in the @code{(define-servertype!)}
statement.  The callback is optional and should return zero to indicate
success.

@item (detect-proto #<svz-server> #<svz-socket>)
Because it is possible to have more than one server instance listening on 
one network port (for connection oriented protocols like TCP and PIPE only)
we need to detect the type of client which is connecting to this port.  This 
routine is getting two arguments where the first one is the server instance
and the second is the client socket object containing all information of the 
client connection.  For successful client detection you need to return a 
non-zero value.  You can set up this callback in the 
@code{(define-servertype!)} statement.  This is mandatory for servers which 
get bound to connection oriented protocol (TCP and PIPE) port configurations
by @code{(bind-server!)}.

@item (connect-socket #<svz-server> #<svz-socket>)
If the client detection signaled success this routine is called to assign
the client connection to the server instance.  The arguments are just
the same as in the detection routine.  In this callback you can assign
all the connection specific callbacks for your server and do some initial
things.  Basically you should specify the @code{handle-request} and/or
@code{check-request} callback.  This can be achieved by calling 
@code{(svz:sock:handle-request)} and @code{(svz:sock:check-request)}.  The
@code{connect-socket} callback is also mandatory for connection oriented
protocols and must by defined inside @code{(define-servertype!)}.  On 
success you should return zero.  Otherwise the connection will be shutdown 
by Serveez.

@item (info-server #<svz-server>)
FIXME: WriteMe

@item (info-client #<svz-server> #<svz-socket>)
FIXME: WriteMe

@item (notify #<svz-server>)
FIXME: WriteMe

@item (handle-request #<svz-socket> #<svz-binary> size)
FIXME: WriteMe

@item (check-request #<svz-socket>)
FIXME: WriteMe

@item (disconnected #<svz-socket>)
FIXME: WriteMe

@end table
