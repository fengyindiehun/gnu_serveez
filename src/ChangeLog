2000-08-27  [ Ela ]  <ela@lkcc.org>

	* nut-server/gnutella.c: Sparely documented the gnutella
	routines and data structures.
	(nut_config_prototype): Added `max-ttl' and `ttl' for the
	configuration file associations.
	(nut_route): Made up a seperate routine for packet routing.
	(nut_ping_reply): Evaluating init responses.
	(nut_idle_searching): Gnutella net search queries for each
	connection is done seperately.

2000-08-26  [ Ela ]  <ela@lkcc.org>

	* Makefile.am (SUBDIRS): Added the nut-server directory
	with the files gnutella.c, gnutella.h and a new 
	Makefile.am file.

	* nut-server/gnutella.c: Basic gnutella spider specified.
	Not yet fully implemented and documented. For now it can
	connect to given servers, make regular search requests,
	accept server connections and route plain queries.

	* hash.c (hash_key_length): Added callback for the actual
	hash key length. Useful for non-string keys.

2000-08-25  [ Ela ]  <ela@lkcc.org>

	* server-core.c (rechain_socket_list): This routine cycles
	the current socket list. It prevents the end of this list to
	starve processing.

2000-08-20  [ Ela ]  <ela@lkcc.org>

	* ctrl-server/control-proto.c (ctrl_connect_socket): 
	Resizing send and receive buffer. Was a problem for
	the long list od `stat con'.

	* socket.c: `socket_version' is the version counter for
	socket structures. Thus we can validate socket structures
	if these have been reintialized.

	* coserver/coserver.c (coserver_handle_request): The 
	callback for coserver requests gets three arguments.
	First the actual result and then two optional arguments.

	* coserver/coserver.h: The coserver callbacks get one more
	argument. These are stored in the callback hash as an array.

	* socket.h (struct socket): Added `version', renamed 
	`socket_id' to `id' and removed `ref'.

2000-08-19  [ Ela ]  <ela@lkcc.org>

	* util.c (util_openfiles): Display the current and maximum 
	open file limit via getrlimit() and try setting it via 
	setrlimit() if necessary and possible.

2000-08-18  [ Ela ]  <ela@lkcc.org>

	* http-server/http-dirlist.c (http_dirlist): Added ability
	to sort the directory listing by scandir() and alphasort().

	* q3key-server/q3key-proto.c (q3key_handle_request): Logfile
	for quake 3 keys implemented.
	(q3key_config_prototype): `logfile' is now configurable via
	configuration file.

2000-08-16  [ Ela ]  <ela@lkcc.org>

	* http-server/http-core.c (http_error_response): Added 
	some routine which shows server and client errors as nice
	HTML document.

	* http-server/http-cgi.c (http_cgi_disconnect): Introduced
	this function as seperate (extended) callback for http
	connections.

2000-08-15  [ Ela ]  <ela@lkcc.org>

	* http-server/http-proto.c (http_tcp_cork): Setting and
	unsetting this socket option when using sendfile() to prevent
	the system to send partial tcp frames.

	* server-loop.c (check_sockets): Put this function into a 
	seperate file for later extensions by poll().
	(check_sockets_poll): Added this function using poll() instead
	of select(). Thus we beat the (g)libc's builtin file 
	descriptor limit of select().

2000-07-31  [ Ela ]  <ela@lkcc.org>

	* udp-socket.c (udp_connect): This routine creates a new socket
	structure with a udp connection to some remote server.

	* q3key-server/q3key-proto.c (q3key_server_definition): Partly
	implemented the first udp server.

	* coserver/dns.c (handle_dns_lookup): `memcpy' the delivered
	inet address to the address field.

	* udp-socket.c (udp_check_request): The default `check_request'
	for udp servers calls all the `handle_request' callbacks of
	each server.
	(udp_printf): This function stores whole udp packets into the
	send_buffer of the server socket structure.

	* server-socket.c (server_create): Do listen only on TCP
	sockets, not on UDP sockets.

	* socket.h (struct socket): Tried to make all ip address
	representations `unsigned long'. Thus we might be able to
	switch to IPv6 somewhen easily.
	(struct socket): Finally determined that ip addresses and ports
	must be in network byte order everywhere.

	* server.h (server_t): Added `handle_request' callback to
	both the server definition and the server instance structures.
	Thus we can handle udp servers.

	* http-server/http-proto.c (http_info_server): Implemented
	the info callback for the http server. This is currently
	used to show the configuration representation. Dropped
	inititial messages when instanciating.

	* ctrl-server/control-proto.c (ctrl_stat_id): Fixed 
	differentiating between Co-Servers and unidentified pipe
	connections.

	* http-server/http-core.c (http_read_types): The content type
	hash is now extendable by the configuration file.

	* server.c (set_hash): Storing hash values of a newly created
	hash as normal xmalloc()ed. Thus you MUST xfree() both the
	values and the hash itself.
	(set_hash): Handle default hash value `NULL'.

	* foo-server/foo-proto.c (foo_info_server): Server info
	callback implemented. This shows the server configuration.
	(foo_finalize): Freeing hash values if necessary.

	* server.c (all_server_definitions): Placed 
	"#if ENABLE_xxx_PROTO" around server definitions.
	(server_start): Using portcfg_equal to compare port 
	configurations when binding server ports.

	* util.h: Included <assert.h> where necessary.

2000-07-28  [ Ela ]  <ela@lkcc.org>

	* socket.c (sock_disconnect): Added solid behaviour if
	a pipe server disconnects with having lingering children.

	* ctrl-server/control-proto.c (ctrl_stat_con): Co-Server
	identified by SOCK_FLAG_PIPE if there is no server for
	socket structure, else we simply state "None".

	* awcs-server/awcs-proto.c (awcs_connect_socket): Assign
	awcs_kicked_socket callback only to clients.

	* util.c (util_itoa): Optimized this function.

	* http-server/http-proto.c (http_get_response): Do not
	send irregular files like devices and pipes.

	* http-server/http-cache.c (http_cache_read): Checking for
	bogus files whose filesize could not been read. Thus 
	preventing a memory leak.

	* http-server/http-cache.c (http_cache_disconnect): First
	check if there is a cache entry.

	* server.c (server_instantiate): Copy example configuration
	definition to server instance config.

2000-07-26  [ Ela ]  <ela@lkcc.org>

	* udp-socket.c (udp_read_socket): Default reader for
	udp sockets.
	(udp_write_socket): Default writer for udp sockets.

	* util.c (util_hexdump): This hexdump function dumps any
	kind of memory to a given file stream. It replaces the
	for dump_request function.

2000-07-25  [ Ela ]  <ela@lkcc.org>

	* alloc.c (xheap): Made up some routines that save all
	xmalloc()ed pointers in a hash structure. Thus we can
	debug memory leaks except within the hash implementation.
	This is for developement purposes only and can be switched
	by the defintion of DEBUG_MEMORY_LEAKS.

	* http-server/http-cache.c (http_check_cache): Figured
	out the main reason for memory leaks within the http
	cache structures. This could happen because of not yet
	fully read cache entries which got simply overwritten
	and therefore lost.

	* http-server/http-core.c: Put some of the basic http
	function into this file to decrease the file sizes of
	the http server.

	* http-server/http-proto.c (http_info_client): Made up
	the http client info callback. Here we show all the
	information refering to a http client connection within
	the control protocol.

	* irc-server/irc-proto.c (irc_delete_client): Fixed irc
	client hash memory leak.

	* http-server/http-cache.c (http_free_cache): Fixed http
	cache memory leak.

	* http-server/http-dirlist.c (http_create_uri): Here we
	create URIs as converted in the below routine. When having
	special characters within file or directory names we have
	to convert them to %XX sequences.

	* http-server/http-proto.c (http_process_uri): Added URI
	convert routine to convert URIs with %XX within file
	requests.

	* server.c (set_port): Use either inet_aton() or inet_addr()
	for forming a valid internet address.

2000-07-21  [ Ela ]  <ela@lkcc.org>

	* socket.c (default_flood_protect): This function should be
	called whenever you want to use flood protection within
	your read_socket callback. It is built in the default readers.

	* server.c (server_find): Find a server instance by a given
	server configuration structure. This routine is used by the
	control protocol to determine a client connections server.
	(server_run_timer): This routine is called by 
	handle_periadic_tasks() in `server-core.c' for each server
	instance.

	* coserver/coserver.c (coserver_delete): Co-Server
	instanciating is now possible via the `int_coserver'
	array.

	* ctrl-server/control-proto.c (ctrl_stat_id): Made the
	client/server info available via new callbacks. Showing
	server instances on listening ports.
	(ctrl_stat_con): Dropped socket descriptor and added the
	server instance name if available for clients. Displaying
	"Listener" and "Co-Server" if so.
	(ctrl_stat_all): Here we show all the server and coserver
	instances and the information about them using the 
	`server_info' callback and the instance arrays.
	(ctrl_info_client): First implemented `info_client' callback
	within serveez. Dummy implementation.
	(ctrl_info_server): Displaying the tcp port as `info_server'
	information, printed when listing the server instances.

	* server.h (server_t): Added `info_client', `info_server' and
	`timer' callback.

	* irc-server/irc-proto.h (struct irc_channel): All the
	IRC structures have now dynamic sizes.

	* irc-server/irc-proto.h (struct irc_client): This 
	structure is now fully dynamic. Thus we save a lot of
	memory.

	* irc-server/irc-event-1.c (irc_oper_callback): Implemented
	/OPER command.

2000-07-19  [ Ela ]  <ela@lkcc.org>

	* irc-server/irc-event-3.c (irc_stats_callback): Added all
	the statistics refering ? lines.
	(irc_info_callback): Added the /INFO command replies.

	* irc-server/irc-config.c (irc_parse_config_lines): Added this
	file. This routine is taking all the X-lines and converts them
	into useful structures.
	(irc_client_valid): Started to implement something like a
	user authorization.

	* irc-server/irc-event-3.c (irc_stats_callback): One more
	/STATS command ('m') has now been implemented.

	* irc-server/irc-event-7.c (irc_users_callback): /USERS
	command fully implemented.

	* util.h (S_ISDIR): Definition of those S_-macros if
	necessary in the Win32 port.

	* http-server/http-cache.c: Everywhere we are using file
	I/O operations we #include <io.h> when building via 
	__MINGW32__.

	* util.c (util_strcasecmp): Added both `util_strcasecmp' and
	`util_strncasecmp'. We are using either the libc version,
	Win32's str(n)icmp() implementation or a fallback.

2000-07-15  [ Ela ]  <ela@lkcc.org>

	* option.h: Declaring `optarg' if necessary.

	* util.h (getcwd): Using native GetCurrentDirectory in Win32.
	(chdir): Using native SetCurrentDirectory in Win32.
	Made all declarations with variable argument list (...) 
	available for non-std-c compiler.

	* http-server/http-dirlist.c (http_dirlist): Replaced
	opendir, readdir and closedir by native functions
	FindFirstFile, FindNextFile and FindClose in Win32.

	* coserver/coserver.c (coserver_send_request): If you have
	more than one coserver of the same type instanciated the 
	requests for these instance will be apportioned.

2000-07-09  [ Ela ]  <ela@lkcc.org>

	* connect.c (default_connect): Moved this function to the
	source file `connect.c'.

	* http-server/http-cache.c (http_cache_create_entry): The 
	http file cache is now a hash using the stored files's names
	as key and the http_cache_entry_t structure as values. 
	Maybe thus we speed up the cache lookup a bit.

2000-07-07  [ Ela ]  <ela@lkcc.org>

	* socket.c (default_connect): This function determines if
	a connection process is still in progress and sets up the
	socket structure if this has been completed.

	* connect.c (sock_connect): Made connection routine to other
	server non-blocking.

	* serveez.c (usage): Dropped -p (--port) option.

	* serveez.h (struct serveez_config): Droppped useless field
	"port". This is now defined by the integrated servers.

	* irc-server/irc-event.h: Went through all
	the IRC server and cleared up naming conventions.

	* socket.h (struct socket): Reference counter introduced.

	* server-core.c (shutdown_socket): Reference counter postpones
	socket shutdown. This is useful if a coserver is still having
	a socket structure in its callback hash.

2000-07-04  [ Ela ]  <ela@lkcc.org>

	* server.c (server_bind): Moved some of the server_* functions
	from "server-socket.c" to "server.c".

2000-07-04  [ RAIMI ]  <raimi@lkcc.org>

	* interface.c (list_local_interfaces): made work partly under AIX.
	interfaces still get listed multiple times but they get listed.

	(list_local_interfaces): fixed multiple device listings. removed
	that ugly sa_data[] method of convertig a sockaddr_in to the
	dotted decimal representation. the cast is even uglier :)

2000-07-01  [ Ela ]  <ela@lkcc.org>

	* coserver/coserver.c (coserver_init): This routine is 
	instanciating all coservers now. Thus you do not need to create
	the coservers yourself.

	* coserver/coserver.h (struct int_coserver_type): Added two more 
	fields to this structure. These are the amount of coserver 
	instances you want to create and an optional initializer 
	routine which will be invoked on coserver startup.

2000-06-30  [ Ela ]  <ela@lkcc.org>

	* http-server/http-dirlist.c (http_dirlist): BUGFIX:
	localtime() could deliver a NULL pointer. That's why we need
	to check for this. Occured: stat()ing ".." when this refers
	to the root directory in Win95.
	(http_dirlist): BUGFIX: Off by one failure when resizing
	dirlist buffer (dirdata).

	* interface.c (list_local_interfaces): BUGFIX: Printing
	"NET_LIST_STRING" in front of network interface list when
	using the IP-Helper-API method.

2000-06-28  [ Ela ]  <ela@lkcc.org>

	* Makefile.am (EXTRA_DIST): Added the appropiate headers
	for the network interface listing in the "include" directory.

	* interface.c (list_local_interfaces): Included the the IP
	Helper API for getting interface information on WinNT4x and
	such.

2000-06-26  [ Ela ]  <ela@lkcc.org>

	* pipe-socket.c (pipe_disconnected): Differentiate shutdown
	of named pipe listeners in Win32: "CloseHandle" and Unices:
	"unlink".

2000-06-25  [ Ela ]  <ela@lkcc.org>

	* interface.c (list_local_interfaces): Made the list of
	local interface under Win9x available via WsControl.

	* Makefile.am (EXTRA_DIST): Added include headers for the
	undocumented WsControl function in Win32.
	(serveez_SOURCES): Added interface.h and interface.c for
	network interface list.

2000-06-23  [ Ela ]  <ela@lkcc.org>

	* http-server/http-proto.c (http_config_prototype): The amount
	of cache entries can now be configured via "cache-entries" 
	within the configuration hash of each http server. When 
	defining various values the largest will win. This because
	the http cache is the same for all http servers, so we prevent
	double caching.

	* http-server/http-cache.c (http_alloc_cache): This function
	must be called to use the http cache. This is usually done
	within the global initializer of the http server. Now the
	amount of cache entries could be configurable.

2000-06-22  [ RAIMI ]  <raimi@lkcc.org>

	* http-server/http-proto.c (http_send_file): Made it work with
	ela on the phone. I typed what he said.

2000-06-22  [ Ela ]  <ela@lkcc.org>

	* ctrl-server/control-proto.c (ctrl_server_definition): Ported
	control protocol to new server concept. This has been the last
	missing server so far... not yet working all right.

	* http-server/http-proto.c (http_get_response): Do not send
	"Content-Length:" header for zero sized files. Keep cache 
	untouched for those kind of files.

	* socket.c (sock_disconnect): Now able to disconnect pipes also.
	This was not available under Win32 yet.

	* server-core.c (sock_enqueue): Both _enqueue and _dequeue are
	availbale under Win32 also. So we could use named pipes in Win32
	also.

	* server-socket.c (server_accept_pipe): CreateNamedPipe is now
	checked for invalid return values. Listener will be unqueued if
	it is not implemented (on Win95).

	* http-server/http-proto.h (struct http_socket): Added fileoffset
	to this structure for sendfile() parameter.

2000-06-21  [ RAIMI ]  <raimi@lkcc.org>

	* Makefile.am ($(SIZZLERULE)): When building our own sizzle from
	source distribution the user doesnt need to make anymore. added
	a makefile target and configure.in stuff to do so.

2000-06-20  [ Ela ]  <ela@lkcc.org>

	* http-server/http-proto.c (http_send_file): Added support
	for sendfile() for sending large http file requests.

	* server.c (set_port): Using inet_addr() instead of 
	inet_aton in Win32, because it is not implemented there.

	* server-socket.c (server_create): Named pipes in Win32 are
	located in "\\.\pipe\". So we put the leading path to the
	actual pipe's name.
	(server_accept_pipe): Here we give ConnectNamedPipe a try
	to listen for connected clients at this pipe.

	* pipe-socket.c (pipe_create): Now we can also create pipe
	sockets in Win32. Non-blocking I/O will be realised via
	overlapped I/O.

2000-06-19  [ Ela ]  <ela@lkcc.org>

	* pipe-socket.c (pipe_write): Using overlapped I/O on Win32
	systems for pipe reading and writing.

	* coserver/coserver.c (start_internal_coserver): Do not set 
	process priority class, but thread priority only.

	* socket.c (default_check_request_byte): Added a array and one
	byte packet delimiter check_request callback for optimizing 
	speed.

	* server.c (set_port): When creating a inet address via
	inet_ntoa the whole structure seems to be destroyed except
	the address. That is why we put in all other information 
	afterwards (port and address family).

	* server-socket.c (server_create): Made network server sockets
	do not route and bind to specific ip addresses via portcfg.

	* irc-server/irc-proto.c (irc_create_client): The miscelleanous
	field sock->data is now used for a irc client structure. Thus
	every socket knows about its associated irc client.
	Various changes within the irc server. Everything untested...

	* irc-server/irc-proto.h (struct irc_client): Channel and 
	client lookup simplified.

2000-06-19  [ RAIMI ]  <raimi@lkcc.org>

	* server.c (set_port): it's now possible to bind ip servers to
	specific local interfaces. pipes can be read from cfgfile now, too.
	the bad news is that it doesnt work and I dont know why...
	
2000-06-18  [ Ela ]  <ela@lkcc.org>

	* irc-server/irc-proto.c (irc_server_definition): IRC server
	is now fully instanciatable. But might not be working, yet...

	* irc-server/irc-server.c (irc_connect_server): IRC server
	connections now non-blocking (using DNS coserver).

	* serveez.c (main): Changed server/coserver initialization 
	startup, to allow servers instances to use coserver requests 
	within their initialization routines.

2000-06-18  [ RAIMI ]  <raimi@lkcc.org>

	* http-server/http-dirlist.c (http_dirlist): changed display format
	of listing. looks a bit strange now due to the underlining of links.
	but is lynx-safe and loads faster because there are no tables in it
	anymore.

2000-06-17  [ Ela ]  <ela@lkcc.org>

	* http-server/http-dirlist.c (http_dirlist): Fixed the "Too many 
	open files" bug for *many* http dirlists (missing closedir()).

2000-06-16  [ Ela ]  <ela@lkcc.org>

	* http-server/http-proto.c (http_get_response): POST and GET method
	do work again. Whole http server is now quite ported to new server
	concept and can be instanciated.
	(http_free_socket): Made a cgi script die if the http connection is
	lost by user abort.

	* alloc.c (xmalloc): Made heap counters available on aligned
	machines.

	* socket.c (default_detect_proto): Fixed the detection fill problem.
	Now using just 16 byte maximum detection fill.

2000-06-15  [ Ela ]  <ela@lkcc.org>

	* http-server/http-proto.c (http_config): Freed most filed from 
	ENABLE_HTTP_PROTO and put all http flags into sock->userflags.

	* socket.h (struct socket): Dropped sock->http, now using 
	miscelleanous field `data' for http connections.

	* http-server/http-proto.c (http_server_definition): Started to
	rewrite http server to new concept. Not yet working...

2000-06-14  [ Ela ]  <ela@lkcc.org>

	* server-core.c (check_sockets): Depending on some new socket flags
	this routine, which might be the most important within serveez, has
	been fully rewritten. All this has been done to unify pipes, sockets
	and files (all fds).

	* socket.h (struct socket): Added sock->userflags for protocol 
	specific flags which cannot be hold within the sock->cfg because
	they are also socket specific.

2000-06-13  [ Ela ]  <ela@lkcc.org>

	* awcs-server/awcs-proto.c: The ENABLE_AWCS_PROTO define is now in
	"awcs-server" directory only (except ctrl-server).
	(awcs_finalize): For now we delete newly created named pipes on 
	the local filesystem by hand here (should be done in the 
	disconnection routine of pipe servers).

	* server-core.c (check_sockets): Made it possible to listen on 
	named pipes via flags and a sock->read_socket callback for 
	these (see below).

	* server-socket.c (server_accept_pipe): Generic named pipe listener.
	(server_create): Added creation of pipe servers.

	* socket.c (sock_disconnect): When a pipe client which was created
	by a pipe server, this client resets the pipe server. When this 
	client has been disconnected the server can start listening again.
	This is procedure indicated by the SOCK_FLAG_INITED flag of 
	the server.

	* socket.h (struct socket): Dropped sflags, is now proto just as it
	comes from the server_t server definitions.
	(struct socket): Added "parent" for listening pipe servers.

	* pipe-socket.c: This file contains all pipe related functions.

	* socket.c (sock_unique_id): This function creates a unique id for
	a socket structure (checked via socket lookup table).

	* util.c (list_local_interfaces): Fixed the signed/unsigned 
	comaprison (always compare sizes unsigned) and free/close resources
	on return.

2000-06-13  [ RAIMI ]  <raimi@lkcc.org>

	* util.c: Added a helper function that can list the local network
	interfaces. It's pretty useless but may help a user or two.
	Furthermore it is tested on Linux and Solaris only and I am not
	sure if all headers included are available on all systems.

	Completed the copyright-string review... hopefully

2000-06-12  [ Ela ]  <ela@lkcc.org>

	* socket.c (default_idle_func): Default idle function for not yet
	identified connections (pipes and sockets). After a certain time
	this socket structure gets discarded if not identifying.

	* server-core.c (pipe_disconnected): Some default disconnection
	routine for pipes.

	* coserver/coserver.c (coserver_init): Global initializer for all
	coservers.
	(coserver_finalize): Global finalizer for all coservers.
	(coserver_handle_request): Scanning coserver resonse ourselves 
	without copying and using sscanf().
	(coserver_handle_request): When a callback gets a NULL for the
	second arg this indicates an error for the invoking coserver request.

	* socket.h (struct socket): Dropped 'ident_func' and 
	'nslookup_func'.

	* coserver/dns.c (handle_dns_lookup): Dns coserver reviewed and
	adapted to new concept. Writing a new coserver is now extremely
	easy.

	* coserver/ident.c (handle_ident): Ident coserver reviewed and
	adapted to new concept.

	* coserver/reverse-dns.c (handle_nslookup): Reverse dns coserver
	reviewed and adpated to new concept.

	* coserver/coserver.c (coserver_send_request): This function got
	some wrappers for each coserver (coserver_???). You will not need
	to '#ifdef' them. Now you're able to call any function with one
	optional argument after getting any result from a coserver result.
	(coserver_handle_request): Get some callback plus an argument from
	some callback hash and call this when a coserver delivered some
	result.

2000-06-09  [ Ela ]  <ela@lkcc.org>

	* socket.c (default_check_packets): This routine is a helper for
	easy packet protocols. It is based on the socket's packet boundary 
	and calls handle_request for each packet.

	* server-socket.c (server_create): Finally fixed the SO_REUSEADDR
	flag for server sockets. bind () will never ever return "address
	already in use", sigh.

2000-05-12  [ Ela ]  <ela@lkcc.org>

	* ctrl-server/control-proto.c (ctrl_idle): Fixed the NAN-error
	within the cpu/process load display. Do not use floating point
	arithmetics.

2000-05-12  [ RAIMI ]  <raimi@lkcc.org>

	* Makefile.am: Program split into several parts: coservers and
	several server modules. ar is our friend.
	Need a good idea making server instances...

2000-05-11  [ Ela ]  <ela@lkcc.org>

	* util.c (util_hstrerror): Was: _hstrerror. On IRIX this is a
	libc symbol, thus we will not preemt it anymore.

	* awcs-proto.c (awcs_check_pipe): If serveez is able to open
	a special named pipe it connects the aWCS-Master through two of
	them.

2000-05-05  [ Ela ]  <ela@lkcc.org>

	* control-proto.c (get_cpu_state): Showing the serveez's process 
	times via times() or clock().

	* control-proto.c (ctrl_kill_id): Killing specific socket ids via
	remote control protocol.
	(ctrl_stat_id): Statistics for given socket ids via control protocol.
	(ctrl_handle_request): The "/" just repeats the last given 
	instruction. This might save some typing.

2000-05-01  [ Ela ]  <ela@lkcc.org>

	* http-proto.c (http_content): Fixed the problem with javascript
	file content. Unfortunately we did not noticed yet...

	* dns.c (handle_dns_lookup): Implemented the DNS lookup
	coserver.

	* http-proto.c (http_read_types): Read content type definitions
	from a given file (e.g. /etc/mime.types).

	* server.c (server_signal_handler): Displaying signal messages.

	* util.c (get_hstrerror): Some wrapper for h_errno error messages.

	* socket.c (default_check_request): Both the HTTP and IRC protocol
	can be instanciated via different configuration hashes.

	* http-proto.c (http_check_keepalive): Fixed the meaning of the
	"max=%d" value within the "Keep-Alive:" header information.
	(http_asc_date): Using RFC822 compliant timestamps in "Date:" and
	"Last-Modified:" header information fields.

	* http-proto.c (http_get_response): Keep-Alive header not exactly 
	matched, but searched within "Connection:".

2000-04-22  [ Ela ]  <ela@lkcc.org>

	* option.c (getopt): Put all the getopt[_long]() functions and
	definitions into seperate files.

	* util.c (get_version): Detecting Win2k and Win98.

2000-04-20  [ Ela ]  <ela@lkcc.org>

	* cfgfile.c (load_config): Integration of sizzle, the configuration
	file language.

	* alloc.c (xfree): The allocated_bytes are now implemented at the
	beginning of each alloc()ed block. So we save the last argument
	in xfree() and xrealloc().

	* serveez.c (main): Set maximimum verbosity to LOG_DEBUG, not 3.
	(main): Error message if allocated_bytes left is not zero.

2000-04-12  [ Ela ]  <ela@lkcc.org>

	* http-cache.c (http_recent_cache): Hopefully fixed now the weird
	recent counter of the HTTP cache file entries.

	* http-cache.c (http_init_cache): The cache structures are now
	also filename length independent.

	* http-proto.c (http_check_keepalive): The HTTP 'Keep-Alive'
	connections are now limited to a configurable timeout and amount
	of successive requests.

	* http-proto.c (http_get_response): Parsing If-Modified-Since
	timestamp for network traffic savings.
	(http_handle_request): HTTP/0.9 simple GET implemented.

	* control-proto.c (ctrl_kill_cache): Killing all http cache entries
	via control protocol.

2000-04-07  [ Ela ]  <ela@lkcc.org>

	* http-proto.c (http_keep_alive): Implemented the HTTP/1.1 feature
	Connection: Keep-Alive. So HTTP/1.1 clients spare time for 
	establishing new connections and get delivered even faster.

	* http-cgi.c (http_pre_exec): Dropped the length limitations of 
	cgi script file names.

	* http-proto.c: Whenever using strcasecmp() and we have <strings.h>
	it is neccessary to include this file.

	* http-cgi.c (http_cgi_exec): Fixed the problem with non-blocking
	cgi pipes -> cgi stdin/stdout MUST be blocking, they cannot handle
	the EAGAIN error.

	* http-proto.c (http_handle_request): No more limitations for
	file lengths and GET method cgi requests.
	(http_handle_request): Fixed the problem with spaces in file
	requests.

2000-04-02  [ Ela ]  <ela@lkcc.org>

	* http-proto.c (http_detect_proto): Call check_request here
	because HTTP requests are *very* short. The socket will not
	be selected() anymore. But thus there is no delay anymore,
	sigh.

	* http-cache.c: Set a limit for cache file sizes.

	* irc-server.c (irc_connect_server): Include TimeStamp extension
	for the IRC protocol.

	* serveez.c: Declaring getopt_long ourselves if the headers do
	not.

2000-03-25  [ RAIMI ]  <raimi@lkcc.org>

	* http-dirlist.c (http_dirlist): Icons for dirs and files.

2000-03-19  [ Ela ]  <ela@lkcc.org>

	* util.c (snprintf): If the system you want to compile the
	serveez software does not implement this function this will
	handle it.

	* util.c (get_version): configure.in defines if the uname() 
	function is implemented.

	* irc-proto.c (irc_detect_proto): Started the implementation
	of a real IRC server ...

2000-03-07  [ Ela ]  <ela@lkcc.org>

	* http-cache.c (http_check_cache): Implemented a http file cache
	for a maximum number of cache entries. It checks the last modification
	timestamp for the cache strategy.

	* control-proto.c (get_cpu_state): Depending on the host system
	this functions gets called to determine the current cpu load.

	* serveez.c (init_config): Now we have a real serveez
	configuration structure, where every configurable value
	can be stored.

	* control-proto.c (ctrl_detect_proto): Made up something
	like the control protocol implementation.

2000-02-29  [ Ela ]  <ela@lkcc.org>

	* http-proto.c (http_get_response): Relocation gets completed
	by the host http property if possible.

	* server.c (check_sockets): connected_sockets is now the
	counter of the real connected sockets.

	* util.h: Fixed the vsnprintf() and snprintf() problem under
	Win32.

2000-02-27  [ RAIMI ]  <raimi@lkcc.org>

	* http-proto.c (http_get_response): Directory listing when 
	accessing dirs without index.html. Redirects dirs without
	the trailing slash.

2000-02-22  [ Ela ]  <ela@lkcc.org>

	* http-cgi.c (insert_env): Made up a kind of wrapper for pasting
	environment strings in Unices and Win32.
	(http_cgi_exec): Give the current work directory parameter to
	CreateProcess.
	(http_cgi_exec): Finally we 'succeeded' in porting all the cgi
	stuff to Windows 95. The only limitation is that there is no 
	non-blocking IO with pipes possible. That's why it might occur
	some strange things while executing cgi scripts.
	(http_cgi_exec): Set uid and gid of the cgi script's owner.
	
	* http-cgi.c (http_cgi_read): Dropped the idea to read or write
	non-blocking into pipes, because Win95 does not implement it.

2000-02-16  [ Ela ]  <ela@lkcc.org>

	* http-cgi.c (http_cgi_exec): Implemented the POST method of
	the cgi interface rudimentary.

	* http-proto.c (http_get_response): Detection of a CGI request
	via GET causes the excution of the script if possible.

	* server.c (check_sockets): Hmm.. why didn't we set the
	CLOSE-ON-EXEC-Flag explicitly ?

	* http-proto.c (http_post_response): This routine implements
	basically the post method the CGI gateway interface uses. We
	just wrote some routines which can react on a html form whose
	action method is "post". It forks the cgi script identified by
	a certain url which refers to some other path where all the
	scripts need to reside, gives the http socket to stdout,
	pipes the content of the document into the stdin and sets some
	useful environment variables. Much work still to do. That part was
	Unix, Windows follows soon...

2000-02-06  [ RAIMI ]  <raimi@lkcc.org>

	* awcs-proto.c : Scheduled master for shutdown when master write
	error occured (lead to infinite loop).

2000-02-04  [ Ela ]  <ela@lkcc.org>

	* coserver.c (send_coserver_request): Check if sending a
	request was successful, otherwise schedule the sock for
	shutdown.

	* awcs-proto.c (awcs_disconnect_clients): Whenever the master
	has been lost we call this method instead of abort().

	* server.c (sock_enqueue): Made up Raimi's request for better
	uniquness of textSure IDs. Now we have forthcoming IDs for
	each connected socket.

	* socket.c (default_write): Resource temporarily unavailable
	implemented for both Unix and Win32.

	* coserver.c (check_internal_coservers): Finish when all 
	responses have been processed.

	* ident.c (handle_ident): Check if it was a USERID response.

	* ident.c (handle_ident): Read socket as long as there is data
	in it.

	* http-proto.c (http_get_response): Added Last-Modified
	field to the HTTP header using the ancient ANSI C's asctime()
	format.

	* util.h : Introduced some wrapper #define's. These are
	WRITE_SOCKET, READ_SOCKET and CLOSE_SOCKET for the socket
	operattion which differ in Unix and Win32 and SYS_ERROR and
	NET_ERROR.

	* util.c (GetWSAErrorMessage): This routine was introduced
	because there is nothing like strerror() for network errors
	in Win32.

	* Makefile (CFLAGS): -O3 -fomit-frame-pointer -fforce-addr 
	-fstrength-reduce -fexpensive-optimizations -m486

	* socket.c (default_read): Detect receive buffer overflow
	properly.

	* server.c (check_sockets): Do not put a socket into the
	write FD_SET if it was unavailable.

2000-01-29  [ Ela ]  <ela@lkcc.org>

	* ident.c: Implemented ident requester as internal coserver.
	(ident_handle_request): Get a request from the coserver and
	call the appropiate ident_func.
	(handle_ident): Connect to the ident server, send a request and
	read out the response. Then return the user ident if successfully
	done.

	* coserver.c (coserver_check_request): This is the new frontend
	for the server to evaluate coserver responses. Detects line.
	(coserver_start): Write a line to one of the running coservers.
	(coserver_loop): This routine is the new frontend for ALL kinds
	of internal coservers in Win32 and Unix. It is the infinite loop
	which permanently reads requests (invoked by coserver_start),
	processed them (via the func) and return a line for the
	server (caught by coserver_check_request).

	* http-proto.c (get_content_type): Made up simplified content
	determination.
	(http_file_read): Set the flag SOCK_FLAG_HTTP_DONE if file has
	been fully read.
	(http_default_write): Shut down the socket if the above flag was set.
	(http_disconnect): Close the http file descriptor if an error
	occured while sending the http file.
	(http_get_response): Use this routine for both HEAD and GET requests.
	This is controlled via the flag HTTP_FLAG_NOFILE.

2000-01-28  [ Ela ]  <ela@lkcc.org>

	* socket.h (struct socket): Defined the socket descriptor
	as SOCKET.

	* socket.c (default_check_request): Detection timeout and 
	maximum detection receive buffer fill prevents invalid connects.

	* nslookup.c
 	ENABLE_REVERSE_LOOKUP - ifdefs accordingly set.
	(handle_nslookup): Return an error if the reverse nslookup 
	failed by gethostbyaddr().

	* server.c 
	(check_sockets): Put a http file descriptor into the read and 
	except FD_SET (Non-Win32, but Unix).
	(server_signal_handler): Wait() for zombie'd coserver children
	prevents reentrant signal handler for SIGCHLD under IRIX 6.x
	Do not close() pipes previously fclose()d.
	(validate_socket_list): Only compile this if ENABLE_DEBUG is
	defined.

2000-01-20  [ Ela ]  <ela@lkcc.org>

	* awcs client-master detection only once
	* when master has been lost only the awcs clients are kicked
	* read() and write() from sockets and pipes only if select()ed
	* internal nslookup coserver implemented
	* coserver concept determined (different in Unix and Win32)
	* strerror replaced by FormatMessage in Win32 port
	* serveez ported to IRIX 6.x
	
1999-12-17  [ RAIMI ]  <raimi@lkcc.org>

	* server.c (check_sockets): mmhh.. someone merged >= INVALID_SOCKET
	into the accept call where != INVALID_SOCKET was correct...

	* util.c (getopt): man... even this one can be implemented the
	wrong way... shoot me

	* serveez.c (main): Extra message removed, will be displayed later

	* socket.c (sock_from_fd): fnctl replaced by ioctlsocket for Win32
	(sock_from_pipe): null-function for win32... no pipe

	* server.c (sock_server_loop): Win32 knows SIGBREAK but not
	SIGHUP/SIGPIPE. Ifdefs set accordingly
	(check_sockets): F_SETFD disabled for Win32... no fork/pipe anyway

	* serveez.c / configure.in : HAVE_GETOPT_H split into HAVE_GETOPT and
	HAVE_GETOPT_LONG. Cygwin has the header but native compile doesn't
	have the function... 

	* server.c (start_coserver): null-function in win32. just doesn't work

	* Makefile.am: client.c connect.* deleted won't be used anyway

1999-12-16  Martin Grabmueller  <mgrabmue@cs.tu-berlin.de>

	* Makefile.am (EXTRA_DIST): Added echoserver, so that everyone can
	see how great Guile is.
	(bin_PROGRAMS): Added bla, which is a simple echo program which
	can be used for testing the coserver feature.

	* server.c, awcs-proto.c, awcs-proto.h, server.c, serveez.c,
	connect.c, socket.c, socket.h, util.c, util.h: Merged changes I
	made to 0.0.10 with the cygwin and solidifying stuff Ela and Raimi
	did. ediff-merge-files-with-ancestor rules BIG time!

1999-12-03  Martin Grabmueller  <mgrabmue@cs.tu-berlin.de>

	* server.c (start_coserver): New function. Starts a seperate
	process connecting its stdin and stdout to a socket structure.

	* echoserver: New file.  This guile script simply echoes its
	standard input to standard output. It can be used as a co-server
	for serveez.

	* socket.c (sock_alloc): Only max_sockets - spare_sockets clients
	are allowed to connect from now on.
	(sock_write): Whenever a whole message fits into the send buffer
	it is copied using memmove(). This spare copying by bytes (thanks
	to ela for suggesting).
	(sock_from_pipe): New function. Creates a socket from a pair of
	file descriptors.

	* awcs-proto.c (status_connected): Using pre-loaded values for
	remote address and port.
	(internal_check_request): Created from
	awcs_check_request. Function now takes an extra argument which
	specifies whether requests are handled or only removed from the
	queue.
	(handle_master_request): Do not accept the "6 \0" message anymore.
	(awcs_connect_socket): Send connected message for both client and
	master now. Remove request, do not handle it.

	* server.c (check_sockets): Do not write on sockets which have
	been scheduled for shutdown in their read handler (thanks to ela).

	* Applied Raimis and Elas patches.
	
	* server.c (sock_server_loop): Print out listening port number and
	max. file descriptor count on startup.

1999-11-18  Martin Grabmueller  <mgrabmue@cs.tu-berlin.de>

	* server.c (check_sockets): Fixed a longstanding bug by passing
	the correct client address size to accept().

1999-11-16  Martin Grabmueller  <mgrabmue@cs.tu-berlin.de>

	* awcs-proto.c (awcs_connect_socket): With last changes,
	connection messages for the master server got lost. Fixed.

	* serveez.c (main): Check the return value of sock_alloc().
	(usage): Added option -m, --max-sockets to the help output.

	* socket.c: Set max_sockets to the default value of 200.

1999-10-26  Martin Grabmueller  <mgrabmue@cs.tu-berlin.de>

	* server.c, server.h, connect.c, connect.h: Created.  Put in there
	some functions from socket.{c,h} due to restructure.

	* socket.c (default_check_request): Added support for protocol
	detection.

	* awcs-proto.c: Added support for protocol detection.
	Added function documentation.

	* socket.c: Added a lot of comments and cleaned the code up a
	bit.

1999-10-21  Martin Grabmueller  <mgrabmue@cs.tu-berlin.de>

	* socket.c (sock_server_loop, server_signal_handler): Handle
	SIGPIPE by printing a notice but otherwise ignore.

1999-10-03  Martin Grabmueller  <mgrabmue@cs.tu-berlin.de>

	* serveez.c: File created.

